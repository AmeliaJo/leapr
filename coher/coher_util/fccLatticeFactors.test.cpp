#define CATCH_CONFIG_MAIN
#include <iostream>
#include "../../catch.hpp"
#include "fccLatticeFactors.h"

void equal( double a, double b ){
  std::cout << a << "      " << b << std::endl;
  if (b == 0.0){ 
    REQUIRE( abs(b-a) < 1e-6 );
    return;
  }
  REQUIRE ( std::abs( (a-b)/(b) ) < 1e-6 );
}


TEST_CASE( "Function to Compute FCC Lattice Factors" ){
  double twothd = 0.666666667, twopis = 39.5;
  int lat = 4;
  std::vector<double> b (60000, 0.0);
  int ifl = 1;
  double w = 0;
  int nw = 60000, imax = 5;
  double t2 = 3.5e-5, c1 = 1.5e15, wint = 0, ulim = 9.6e19, a = 2e-8;
  fccLatticeFactors( twothd, twopis, lat, b, ifl, w, nw, t2, imax, c1, wint, ulim, a );
  std::vector<double> b_0_99 { 4.88812504E+19, 2.28848899E-9, 4.71630004E+19, 
    2.32980337E-9, 4.55632504E+19, 2.37035085E-9, 4.40820004E+19, 
    2.40984625E-9, 4.27192503E+19, 2.44798172E-9, 4.14750003E+19, 
    2.48443010E-9, 4.03492503E+19, 2.51884966E-9, 3.93420003E+19, 
    2.55089018E-9, 3.84532503E+19, 2.58020049E-9, 3.76830003E+19, 
    2.60643708E-9, 3.70312503E+19, 2.62927368E-9, 3.64980003E+19, 
    2.64841139E-9, 3.60832503E+19, 2.66358865E-9, 3.57870003E+19, 
    2.67459072E-9, 3.56092503E+19, 2.68125776E-9, 3.55500003E+19, 
    2.68349121E-9, 3.56092503E+19, 2.68125776E-9, 3.57870003E+19, 
    2.67459072E-9, 3.60832503E+19, 2.66358865E-9, 3.64980003E+19, 
    2.64841139E-9, 3.70312503E+19, 2.62927368E-9, 3.76830003E+19, 
    2.60643708E-9, 3.84532503E+19, 2.58020049E-9, 3.93420003E+19, 
    2.55089018E-9, 4.03492503E+19, 2.51884966E-9, 4.14750003E+19, 
    2.48443010E-9, 4.27192503E+19, 2.44798172E-9, 4.40820004E+19, 
    2.40984625E-9, 4.55632504E+19, 2.37035085E-9, 4.71630004E+19, 
    2.32980337E-9, 4.88812504E+19, 2.28848899E-9, 4.71630004E+19, 
    2.32980337E-9, 4.54052504E+19, 2.37447141E-9, 4.37660004E+19, 
    2.41853041E-9, 4.22452503E+19, 2.46167683E-9, 4.08430003E+19, 
    2.50357821E-9, 3.95592503E+19, 2.54387610E-9, 3.83940003E+19, 
    2.58219062E-9, 3.73472503E+19, 2.61812673E-9, 3.64190003E+19, 
    2.65128229E-9, 3.56092503E+19, 2.68125776E-9, 3.49180003E+19, 
    2.70766730E-9, 3.43452503E+19, 2.73015082E-9, 3.38910003E+19, 
    2.74838638E-9, 3.35552503E+19, 2.76210218E-9, 3.33380003E+19, 
    2.77108730E-9, 3.32392503E+19, 2.77520054E-9, 3.32590003E+19, 
    2.77437643E-9, 3.33972503E+19, 2.76862812E-9, 3.36540003E+19, 
    2.75804682E-9 };
  for ( auto i = 0; i < 100; ++i ){ 
    //equal( b[i], b_0_99[i] ); 
  }
  std::vector<double> b_1000_1099 { 2.97554068E-9, 2.69192502E+19, 3.08381632E-9, 2.50430002E+19, 3.19725153E-9, 2.32852502E+19, 3.31573282E-9, 2.16460002E+19, 3.43899190E-9, 2.01252501E+19, 3.56655839E-9, 1.87230001E+19, 3.69770501E-9, 1.74392501E+19, 3.83138750E-9, 1.62740001E+19, 3.96618369E-9, 1.52272501E+19, 4.10023965E-9, 1.42990001E+19, 4.23123501E-9, 1.34892501E+19, 4.35638324E-9, 1.27980001E+19, 4.47248536E-9, 1.22252501E+19, 4.57605363E-9, 1.17710001E+19, 4.66351417E-9, 1.14352501E+19, 4.73148152E-9, 1.12180001E+19, 4.77707723E-9, 1.11192501E+19, 4.79824294E-9, 1.11390001E+19, 4.79398729E-9, 1.12772501E+19, 4.76451146E-9, 1.15340001E+19, 4.71118335E-9, 1.19092501E+19, 4.63636666E-9, 1.24030001E+19, 4.54314511E-9, 1.30152501E+19, 4.43500101E-9, 1.37460001E+19, 4.31550685E-9, 1.45952501E+19, 4.18807269E-9, 1.55630001E+19, 4.05577003E-9, 1.66492501E+19, 3.92123294E-9, 3.57870003E+19, 2.67459072E-9, 3.33972503E+19, 2.76862812E-9, 3.11260002E+19, 2.86786249E-9, 2.89732502E+19, 2.97249664E-9, 2.69390002E+19, 3.08268568E-9, 2.50232502E+19, 3.19851302E-9, 2.32260002E+19, 3.31995937E-9, 2.15472502E+19, 3.44686326E-9, 1.99870001E+19, 3.57887206E-9, 1.85452501E+19, 3.71538338E-9, 1.72220001E+19, 3.85547763E-9, 1.60172501E+19, 3.99784547E-9, 1.49310001E+19, 4.14071684E-9, 1.39632501E+19, 4.28180341E-9, 1.31140001E+19, 4.41827141E-9, 1.23832501E+19, 4.54676659E-9, 1.17710001E+19, 4.66351417E-9, 1.12772501E+19, 4.76451146E-9, 1.09020001E+19, 4.84581568E-9, 1.06452500E+19, 4.90390499E-9, 1.05070000E+19, 4.93606209E-9, 1.04872500E+19, 4.94070780E-9, 1.05860000E+19, 4.91760946E-9 };
  for ( auto i = 0; i < 100; ++i ){ 
    //equal( b[i+99], b_1000_1099[i] ); 
  }


  GIVEN( "inputs" ){
    THEN( "outputs" ){
      REQUIRE( true );

    } // THEN
  } // GIVEN
} // TEST CASE

