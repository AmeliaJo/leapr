#define CATCH_CONFIG_MAIN
#include <iostream>
#include "../../catch.hpp"
#include "hexLatticeFactorsMid.h"

void equal( double a, double b ){
  //std::cout << a << "     " << b << std::endl;
  if (b == 0.0){ 
    REQUIRE( std::abs(b-a) < 1e-6 );
    return;
  }
  REQUIRE ( std::abs( (a-b)/(b) ) < 1e-6 );
}

void equal_vec( std::vector<double> a, std::vector<double> b ){
  REQUIRE( a.size() == b.size() );
  for ( int i = 0; i < a.size(); ++i ){
    equal( a[i], b[i] );
  }
}


TEST_CASE( "Function to Compute Hex Lattice Factors" ){
  double a = 1e-9, c1 = 1.5e15, c2 = 2.5e15, tsqx = 9.6e17,
    t2 = 3.5e-5, ulim = 9.6e19, c = 3.58e-8, tsq = 0, wint = 0;
  int i = 0, ifl = 1, lat = 3, nw = 60000, imax = 5, k = 0;
  std::vector<double> b (60000, 0.0);

  int i1 = 1, l1 = 0, i2m = 2; 
  GIVEN( "few iterations" ){
    THEN( "outputs" ){
      hexLatticeFactorsMid( a, tsq, c1, c2, lat, nw, tsqx, b, ifl, 
          i, wint, t2, ulim, imax, c, i1, i2m, l1, k );
      std::vector<double> bVals {98696046700994448., 0, 98696046700994448., 0,
        3.9478418680397779E+017, 3.7496904081434691E-008, 3.9478418680397779E+017,
	3.7496904081434691E-008, 8.8826442030895002E+017, 0, 8.8826442030895002E+017,
	0, 1.5791367472159112E+018, 2.9648268958249963E-009, 2.4674011675248614E+018, 
	1.4930697353051541E-007, 3.5530576812358001E+018, 4.9790124283736533E-008,
	4.8361062883487283E+018, 2.0515566246175135E-008, 6.3165469888636447E+018,
	7.3326693185698875E-008, 7.9943797827805501E+018, 1.5994816690643457E-008,
	9.8696046700994458E+018, 2.9952728457199708E-008, 1.1942221650820327E+019,
	6.8506737797650150E-008, 1.4212230724943200E+019, 9.9633527046684907E-010,
	1.6679631892468062E+019, 5.8007901006286768E-008, 1.9344425153394913E+019,
	2.1410441822360075E-008, 2.2206610507723751E+019, 9.6195509428494399E-009,
	2.5266187955454579E+019, 3.6727381091433330E-008, 2.8523157496587395E+019,
	8.4903397195303887E-009, 3.1977519131122201E+019, 1.6657585989974948E-008,
	3.5629272859058995E+019, 3.9727008566456193E-008, 3.9478418680397783E+019,
	5.9819842155176793E-010, 4.3524956595138552E+019, 3.5948894753148489E-008, 
	4.7768886603281310E+019, 1.3631015975905929E-008 };
      for ( auto i = 0; i < bVals.size(); ++i ){ equal( b[i], bVals[i] ); }
    } // THEN
  } // GIVEN

  i2m = 5;
  GIVEN( "a few more iterations" ){
    THEN( "outputs" ){
      hexLatticeFactorsMid( a, tsq, c1, c2, lat, nw, tsqx, b, ifl, 
          i, wint, t2, ulim, imax, c, i1, i2m, l1, k );
      std::vector<double> bVals { 98696046700994448., 0, 98696046700994448., 0,
        3.9478418680397779E+017, 3.7496904081434691E-008, 3.9478418680397779E+017,
	3.7496904081434691E-008, 8.8826442030895002E+017, 0, 8.8826442030895002E+017,
	0, 1.5791367472159112E+018, 2.9648268958249963E-009, 2.4674011675248614E+018, 
	1.5048971000282083E-007, 3.5530576812358001E+018, 4.9790124283736533E-008,
	4.8361062883487283E+018, 4.0668709279389511E-008, 6.3165469888636447E+018,
	1.0940532054426100E-007, 7.9943797827805501E+018, 3.1816085933875347E-008,
	9.8696046700994458E+018, 4.4774681223082713E-008, 1.1942221650820327E+019,
	1.3651199619782683E-007, 1.4212230724943200E+019, 3.4492768765771068E-009,
	1.6679631892468062E+019, 1.1571040585756589E-007, 1.9344425153394913E+019,
	8.4794339085887722E-008, 2.2206610507723751E+019, 2.8634182392445848E-008,
	2.5266187955454579E+019, 1.4579023535853167E-007, 2.8523157496587395E+019,
	2.5315824646654661E-008 };

      for ( auto i = 0; i < bVals.size(); ++i ){ equal( b[i], bVals[i] ); }

    } // THEN
  } // GIVEN
} // TEST CASE

