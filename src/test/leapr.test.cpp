#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include "leapr.cpp"
#include <range/v3/all.hpp>

auto equal = [](auto x, auto y, double tol = 1e-6){return x == Approx(y).epsilon(tol);};

TEST_CASE( "leapr" ){
  int nphon, ncold, lat;
  double sps, awr, aws, delta, twt, c, tbeta, dka;
  std::vector<double> alpha, beta, temp, rho, oscE, oscW, kappa,
                      ssmDiag(70), ssmChangeA(70), ssmChangeB(70);

  GIVEN( "quickTest" ) {
    nphon = 100;
    awr   = 0.99917;  ncold = 0; 
    aws   = 15.85316; sps = 3.8883; 
    lat   = 0;            
    alpha = {.01008,   .033,     0.050406, 0.504060, 0.554466, 1.873790, 
             2.055660, 5.671180, 7.472890, 20.52030, 32.46250, 50.0};
    beta  = {0.000000, 0.006375, 0.038250, 0.06575, 0.564547, 1.77429,
             3.422470, 8.258620, 18.72180, 25.0};
    //alpha = { 0.01, 0.10, 1.0, 10.0 };
    //beta  = { 0.00, 0.50, 5.0 };
    temp  = { 296.0 };                                          
    delta = 0.00255;                                           
    rho = {0, 0.0005, 0.001, 0.002, 0.0035, 0.005, 0.0075, 0.01, 0.013, 0.0165, 
           0.02, 0.0245, 0.029, 0.034, 0.0395, 0.045, 0.0506, 0.0562, 0.0622, 
           0.0686, 0.075, 0.083, 0.091, 0.099, 0.107, 0.115, 0.1197, 0.1214, 
           0.1218, 0.1195, 0.1125, 0.1065, 0.1005, 0.09542, 0.09126, 0.0871, 
           0.0839, 0.0807, 0.07798, 0.07574, 0.0735, 0.07162, 0.06974, 0.06804, 
           0.06652, 0.065, 0.0634, 0.0618, 0.06022, 0.05866, 0.0571, 0.05586, 
           0.05462, 0.0535, 0.0525, 0.0515, 0.05042, 0.04934, 0.04822, 0.04706, 
           0.0459, 0.04478, 0.04366, 0.04288, 0.04244, 0.042, 0.0, };
    twt    = 0.055556;   c = 0.0;   tbeta = 0.444444;
    oscE   = { 0.205,    0.48};                                 
    oscW   = { 0.166667, 0.333333 };                            
    dka = 0.0;

    auto oscEnergiesWeights = ranges::view::zip(oscE,oscW);

    auto sab = leapr( nphon, awr, ncold, aws, lat, alpha, beta, temp, delta, rho, twt, c, tbeta, oscEnergiesWeights, dka, kappa );

    std::vector<double> sabCorrect { 1.188670E+1, 1.168376E+1, 6.300891E+0, 
    1.781912E+0, 3.162210E-4, 4.692060E-4, 3.081720E-4, 2.514578E-5, 1.701154E-4, 
    6.09094E-10, 6.527907E+0, 6.500191E+0, 5.437262E+0, 3.734029E+0, 1.050239E-3, 
    1.518856E-3, 9.981392E-4, 1.995450E-4, 1.200483E-3, 1.282587E-8, 5.256809E+0, 
    5.241938E+0, 4.691417E+0, 3.687751E+0, 1.615068E-3, 2.303674E-3, 1.516466E-3, 
    3.464544E-4, 1.860820E-3, 3.807045E-8, 1.478889E+0, 1.480819E+0, 1.486305E+0, 
    1.470555E+0, 1.288961E-1, 2.017464E-2, 1.408493E-2, 7.462729E-3, 1.027139E-2, 
    1.373864E-5, 1.392511E+0, 1.394460E+0, 1.401735E+0, 1.388500E+0, 1.549325E-1, 
    2.190231E-2, 1.538571E-2, 8.382694E-3, 1.082756E-2, 1.748288E-5, 5.552458E-1, 
    5.564724E-1, 5.626823E-1, 5.679902E-1, 3.628562E-1, 5.450169E-2, 4.333900E-2, 
    2.265130E-2, 1.672152E-2, 3.550178E-4, 5.089281E-1, 5.100789E-1, 5.158600E-1, 
    5.210213E-1, 3.557392E-1, 5.783144E-2, 4.633066E-2, 2.381095E-2, 1.691639E-2, 
    4.420672E-4, 1.455618E-1, 1.459800E-1, 1.481698E-1, 1.499734E-1, 1.599368E-1, 
    9.192485E-2, 7.299081E-2, 3.854093E-2, 1.533922E-2, 3.925552E-3, 9.083275E-2, 
    9.109755E-2, 9.245460E-2, 9.367509E-2, 1.060097E-1, 8.399707E-2, 7.119046E-2, 
    4.314996E-2, 1.459694E-2, 6.322492E-3, 6.735360E-3, 6.756551E-3, 6.863877E-3, 
    6.958397E-3, 8.741588E-3, 1.328617E-2, 1.925801E-2, 3.149450E-2, 2.194943E-2, 
    1.818368E-2, 9.378210E-4, 9.408032E-4, 9.559292E-4, 9.692905E-4, 1.230320E-3, 
    2.054059E-3, 3.601626E-3, 1.031145E-2, 1.933435E-2, 1.935657E-2, 6.228358E-5, 
    6.248242E-5, 6.348621E-5, 6.436519E-5, 8.208659E-5, 1.425013E-4, 2.777029E-4, 
    1.245381E-3, 6.606240E-3, 1.044380E-2};
  REQUIRE( ranges::equal(sab,sabCorrect,equal) );



  
  } // GIVEN
} // TEST CASE


