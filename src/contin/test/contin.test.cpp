#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include "contin/contin.h"
#include "generalTools/testing.h"



TEST_CASE( "continuous treatment" ){
  int nphon;
  double delta, tbeta, tev, sc, scaling, lambda_s, t_bar;
  std::vector<double> alpha, beta, rho, sabCorrect;
  std::tuple<double,double> output;

  GIVEN( "simplified water example" ){
    nphon = 100; 
    delta = 0.00255; tbeta = 0.444444; tev = 2.5507297688E-2; 
    sc = 0.0253/tev; scaling = sc;

    rho   = { 0.0, 0.0005, 0.001, 0.002, 0.0035, 0.005, 0.0075, 0.01, 0.013, 
    0.0165, 0.02, 0.0245, 0.029, 0.034, 0.0395, 0.045, 0.0506, 0.0562, 0.0622, 
    0.0686, 0.075, 0.083, 0.091, 0.099, 0.107, 0.115, 0.1197, 0.1214, 0.1218, 
    0.1195, 0.1125, 0.1065, 0.1005, 0.09542, 0.09126, 0.0871, 0.0839, 0.0807, 
    0.07798, 0.07574, 0.0735, 0.07162, 0.06974, 0.06804, 0.06652, 0.065, 0.0634, 
    0.0618, 0.06022, 0.05866, 0.0571, 0.05586, 0.05462, 0.0535, 0.0525, 0.0515, 
    0.05042, 0.04934, 0.04822, 0.04706, 0.0459, 0.04478, 0.04366, 0.04288, 
    0.04244, 0.042, 0.};


    WHEN( "alpha and beta grid is relatively small" ){
      alpha = {0.01, 0.08, 4.00, 6.00, 20, 50};
      beta = {0.0, 0.4, 1.0, 5.0, 9.0, 20};
      std::vector<double> symSab( alpha.size()*beta.size(), 0.0 );

      output = contin( nphon, delta, tbeta, scaling, tev, sc, rho, alpha, beta, symSab );
      THEN( "contin output matches expected value" ){
        lambda_s =   0.2352041964494244, t_bar = 1.9344942054735312;
        sabCorrect = {
 5.6553448E-04, 2.9998239E-04, 3.5728611E-04, 1.3283598E-04, 7.2155584E-08,
 7.0383675E-16, 4.4601537E-03, 2.3709915E-03, 2.8246954E-03, 1.0657726E-03,
 4.6129213E-06, 2.9194888E-12, 1.0134916E-01, 6.0785511E-02, 7.3518778E-02,
 5.1338891E-02, 9.9527483E-03, 2.6923598E-05, 1.0257124E-01, 6.5337140E-02,
 7.9600320E-02, 6.9281786E-02, 1.9855721E-02, 1.4530853E-04, 2.6874094E-02,
 2.4511956E-02, 3.1123242E-02, 6.6847691E-02, 6.6284139E-02, 1.1948925E-02,
 1.0067245E-03, 1.2017244E-03, 1.5855351E-03, 6.8388574E-03, 1.7465674E-02,
 4.3725435E-02};
        REQUIRE(ranges::equal(sabCorrect, symSab, equal));
        REQUIRE(lambda_s == Approx(std::get<0>(output)).epsilon(1e-6));
        REQUIRE(t_bar    == Approx(std::get<1>(output)).epsilon(1e-6));
      } // THEN
    } // WHEN

  
    WHEN( "alpha and beta grid is larger" ){

sabCorrect = {
 5.6553448E-04,  5.6838546E-04,  5.7123645E-04,  5.7408744E-04,  5.7693842E-04,
 5.7978941E-04,  5.8264040E-04,  5.8549139E-04,  5.8834237E-04,  5.9119336E-04,
 5.9404435E-04,  3.1648544E-04,  2.9150645E-04,  2.9998239E-04,  2.8804518E-04,
 3.1222006E-04,  3.2063479E-04,  3.3305120E-04,  3.4840621E-04,  3.5728611E-04,
 4.8899523E-04,  2.1589873E-04,  8.8731671E-05,  1.2984180E-07,  3.0467685E-08,
 5.4636174E-12,  7.0383675E-16,  8.7907986E-19,  1.1287644E-03,  1.1344539E-03,
 1.1401434E-03,  1.1458329E-03,  1.1515224E-03,  1.1572119E-03,  1.1629014E-03,
 1.1685909E-03,  1.1742804E-03,  1.1799699E-03,  1.1856594E-03,  6.3184092E-04,
 5.8200398E-04,  5.9892822E-04,  5.7512420E-04,  6.2337635E-04,  6.4018338E-04,
 6.6497494E-04,  6.9563024E-04,  7.1336611E-04,  9.7634697E-04,  4.3157066E-04,
 1.7762681E-04,  5.1895921E-07,  1.2203981E-07,  4.3778275E-11,  1.1281905E-14,
 1.5230159E-17,  2.2483397E-03,  2.2596689E-03,  2.2709982E-03,  2.2823275E-03,
 2.2936568E-03,  2.3049861E-03,  2.3163153E-03,  2.3276446E-03,  2.3389739E-03,
 2.3503032E-03,  2.3616325E-03,  1.2591745E-03,  1.1599831E-03,  1.1937214E-03,
 1.1463938E-03,  1.2425089E-03,  1.2760334E-03,  1.3254520E-03,  1.3865443E-03,
 1.4219205E-03,  1.9461373E-03,  8.6223168E-04,  3.5590311E-04,  2.0725741E-06,
 4.8950451E-07,  3.5133145E-10,  1.8116528E-13,  2.8117901E-16,  3.3587836E-03,
 3.3757033E-03,  3.3926229E-03,  3.4095426E-03,  3.4264623E-03,  3.4433820E-03,
 3.4603016E-03,  3.4772213E-03,  3.4941410E-03,  3.5110607E-03,  3.5279803E-03,
 1.8820258E-03,  1.7339591E-03,  1.7844018E-03,  1.7138290E-03,  1.8574203E-03,
 1.9075730E-03,  1.9814548E-03,  2.0727671E-03,  2.1256885E-03,  2.9094057E-03,
 1.2919782E-03,  5.3482022E-04,  4.6559536E-06,  1.1043903E-06,  1.1894553E-09,
 9.2045265E-13,  1.6147768E-15,  4.4601537E-03,  4.4826147E-03,  4.5050757E-03,
 4.5275368E-03,  4.5499978E-03,  4.5724588E-03,  4.5949198E-03,  4.6173809E-03,
 4.6398419E-03,  4.6623029E-03,  4.6847639E-03,  2.5004198E-03,  2.3039535E-03,
 2.3709915E-03,  2.2774497E-03,  2.4681329E-03,  2.5348248E-03,  2.6330071E-03,
 2.7543235E-03,  2.8246954E-03,  3.8661866E-03,  1.7208054E-03,  7.1436949E-04,
 8.2642113E-06,  1.9686645E-06,  2.8282035E-09,  2.9194888E-12,  5.7127880E-15,
 1.0881003E-02,  1.0935701E-02,  1.0990399E-02,  1.1045096E-02,  1.1099794E-02,
 1.1154492E-02,  1.1209190E-02,  1.1263887E-02,  1.1318585E-02,  1.1373283E-02,
 1.1427981E-02,  6.1185582E-03,  5.6415024E-03,  5.8058553E-03,  5.5801755E-03,
 6.0454756E-03,  6.2095539E-03,  6.4501663E-03,  6.7470430E-03,  6.9201474E-03,
 9.4725406E-03,  4.2742013E-03,  1.8044626E-03,  5.1163131E-05,  1.2498055E-05,
 4.4997042E-08,  1.1645103E-10,  3.6975113E-13,  2.0893706E-02,  2.0998425E-02,
 2.1103145E-02,  2.1207864E-02,  2.1312583E-02,  2.1417302E-02,  2.1522021E-02,
 2.1626740E-02,  2.1731459E-02,  2.1836178E-02,  2.1940897E-02,  1.1808368E-02,
 1.0899575E-02,  1.1217778E-02,  1.0792543E-02,  1.1686378E-02,  1.2005869E-02,
 1.2471393E-02,  1.3044400E-02,  1.3381381E-02,  1.8319834E-02,  8.4533348E-03,
 3.6662678E-03,  2.0141089E-04,  5.1210439E-05,  3.7029727E-07,  1.9256303E-09,
 1.0051483E-11,  3.0091653E-02,  3.0242029E-02,  3.0392405E-02,  3.0542780E-02,
 3.0693156E-02,  3.0843532E-02,  3.0993907E-02,  3.1144283E-02,  3.1294659E-02,
 3.1445034E-02,  3.1595410E-02,  1.7092811E-02,  1.5794511E-02,  1.6256612E-02,
 1.5655926E-02,  1.6943809E-02,  1.7410363E-02,  1.8085905E-02,  1.8915446E-02,
 1.9407426E-02,  2.6574283E-02,  1.2533371E-02,  5.5773754E-03,  4.4592095E-04,
 1.1776220E-04,  1.2828083E-06,  1.0053103E-08,  7.3205992E-11,  3.8525392E-02,
 3.8717352E-02,  3.8909312E-02,  3.9101272E-02,  3.9293232E-02,  3.9485192E-02,
 3.9677152E-02,  3.9869112E-02,  4.0061072E-02,  4.0253032E-02,  4.0444992E-02,
 2.1994104E-02,  2.0345619E-02,  2.0942189E-02,  2.0188268E-02,  2.1837860E-02,
 2.2443438E-02,  2.3314872E-02,  2.4382442E-02,  2.5020883E-02,  3.4266742E-02,
 1.6510859E-02,  7.5302079E-03,  7.7993141E-04,  2.1352291E-04,  3.1149725E-06,
 3.2699901E-08,  3.0611326E-10,  7.5571073E-02,  7.5941293E-02,  7.6311513E-02,
 7.6681733E-02,  7.7051953E-02,  7.7422173E-02,  7.7792393E-02,  7.8162613E-02,
 7.8532833E-02,  7.8903053E-02,  7.9273272E-02,  4.4466407E-02,  4.1400373E-02,
 4.2631833E-02,  4.1334009E-02,  4.4580444E-02,  4.5867650E-02,  4.7656406E-02,
 4.9817834E-02,  5.1173555E-02,  7.0169484E-02,  3.8091714E-02,  1.9752726E-02,
 4.4062956E-03,  1.4501293E-03,  5.4372146E-05,  1.4664119E-06,  3.2543351E-08,
 1.0134916E-01,  1.0183298E-01,  1.0231680E-01,  1.0280061E-01,  1.0328443E-01,
 1.0376825E-01,  1.0425206E-01,  1.0473588E-01,  1.0521970E-01,  1.0570351E-01,
 1.0618733E-01,  6.2686865E-02,  5.8982414E-02,  6.0785511E-02,  5.9465001E-02,
 6.3851421E-02,  6.5809924E-02,  6.8397123E-02,  7.1457267E-02,  7.3518778E-02,
 1.0107725E-01,  6.5059818E-02,  3.9786012E-02,  1.4739589E-02,  6.0815621E-03,
 4.7811040E-04,  2.6923598E-05,  1.2081963E-06,  1.0257124E-01,  1.0304994E-01,
 1.0352864E-01,  1.0400735E-01,  1.0448605E-01,  1.0496476E-01,  1.0544346E-01,
 1.0592217E-01,  1.0640087E-01,  1.0687958E-01,  1.0735828E-01,  6.6637858E-02,
 6.3340739E-02,  6.5337140E-02,  6.4443403E-02,  6.8927079E-02,  7.1156412E-02,
 7.3978649E-02,  7.7252714E-02,  7.9600320E-02,  1.0980598E-01,  8.1575092E-02,
 5.6715063E-02,  2.7445910E-02,  1.3387084E-02,  1.6527252E-03,  1.4530853E-04,
 1.0039192E-05,  9.2892662E-02,  9.3318039E-02,  9.3743416E-02,  9.4168793E-02,
 9.4594170E-02,  9.5019547E-02,  9.5444924E-02,  9.5870301E-02,  9.6295678E-02,
 9.6721055E-02,  9.7146432E-02,  6.3319048E-02,  6.0775306E-02,  6.2754227E-02,
 6.2359164E-02,  6.6470184E-02,  6.8722884E-02,  7.1474553E-02,  7.4611684E-02,
 7.6986816E-02,  1.0662339E-01,  8.9569333E-02,  6.9212387E-02,  4.0050446E-02,
 2.2292146E-02,  3.8326351E-03,  4.6638109E-04,  4.4189172E-05,  7.9437473E-02,
 7.9795769E-02,  8.0154065E-02,  8.0512361E-02,  8.0870657E-02,  8.1228953E-02,
 8.1587249E-02,  8.1945545E-02,  8.2303841E-02,  8.2662137E-02,  8.3020433E-02,
 5.6729258E-02,  5.4956670E-02,  5.6807106E-02,  5.6832227E-02,  6.0399364E-02,
 6.2532610E-02,  6.5061439E-02,  6.7900303E-02,  7.0153630E-02,  9.7598494E-02,
 9.1219651E-02,  7.7135468E-02,  5.1033608E-02,  3.1664744E-02,  7.0896583E-03,
 1.1167203E-03,  1.3600086E-04,  4.7732716E-02,  4.7943623E-02,  4.8154529E-02,
 4.8365436E-02,  4.8576343E-02,  4.8787250E-02,  4.8998156E-02,  4.9209063E-02,
 4.9419970E-02,  4.9630877E-02,  4.9841783E-02,  3.7972086E-02,  3.7556330E-02,
 3.8929808E-02,  3.9498415E-02,  4.1739003E-02,  4.3342075E-02,  4.5140816E-02,
 4.7099160E-02,  4.8803325E-02,  6.8785386E-02,  7.9602002E-02,  8.0639220E-02,
 6.7554384E-02,  5.1605256E-02,  1.8999509E-02,  4.8550702E-03,  9.4687407E-04,
 2.6874094E-02,  2.6993039E-02,  2.7111984E-02,  2.7230929E-02,  2.7349874E-02,
 2.7468819E-02,  2.7587764E-02,  2.7706709E-02,  2.7825655E-02,  2.7944600E-02,
 2.8063545E-02,  2.3442661E-02,  2.3582995E-02,  2.4511956E-02,  2.5132254E-02,
 2.6459615E-02,  2.7541130E-02,  2.8713907E-02,  2.9964567E-02,  3.1123242E-02,
 4.4504338E-02,  6.0366777E-02,  7.0259410E-02,  6.9296765E-02,  6.1699292E-02,
 3.2765153E-02,  1.1948925E-02,  3.2949346E-03,  1.4974727E-02,  1.5042154E-02,
 1.5109581E-02,  1.5177009E-02,  1.5244436E-02,  1.5311863E-02,  1.5379290E-02,
 1.5446718E-02,  1.5514145E-02,  1.5581572E-02,  1.5649000E-02,  1.4062135E-02,
 1.4334238E-02,  1.4934864E-02,  1.5429147E-02,  1.6207524E-02,  1.6901398E-02,
 1.7638605E-02,  1.8414586E-02,  1.9164032E-02,  2.7808184E-02,  4.2543911E-02,
 5.5321907E-02,  6.1777780E-02,  6.2037752E-02,  4.4054173E-02,  2.1316072E-02,
 7.7446092E-03,  8.4353212E-03,  8.4742359E-03,  8.5131506E-03,  8.5520653E-03,
 8.5909800E-03,  8.6298948E-03,  8.6688095E-03,  8.7077242E-03,  8.7466389E-03,
 8.7855536E-03,  8.8244683E-03,  8.3710316E-03,  8.6167465E-03,  8.9957769E-03,
 9.3428054E-03,  9.8019165E-03,  1.0236265E-02,  1.0692408E-02,  1.1168927E-02,
 1.1641770E-02,  1.7130898E-02,  2.8743291E-02,  4.0910896E-02,  5.0447835E-02,
 5.5887987E-02,  5.0464590E-02,  3.0885530E-02,  1.4119899E-02,  4.8372362E-03,
 4.8601058E-03,  4.8829754E-03,  4.9058449E-03,  4.9287145E-03,  4.9515841E-03,
 4.9744537E-03,  4.9973233E-03,  5.0201929E-03,  5.0430625E-03,  5.0659321E-03,
 4.9908487E-03,  5.1729762E-03,  5.4090161E-03,  5.6379362E-03,  5.9114564E-03,
 6.1802168E-03,  6.4607323E-03,  6.7526287E-03,  7.0473395E-03,  1.0503270E-02,
 1.8929055E-02,  2.9026523E-02,  3.8832222E-02,  4.6703863E-02,  5.1708108E-02,
 3.8685646E-02,  2.1538167E-02,  2.8247806E-03,  2.8384183E-03,  2.8520559E-03,
 2.8656935E-03,  2.8793312E-03,  2.8929688E-03,  2.9066064E-03,  2.9202441E-03,
 2.9338817E-03,  2.9475193E-03,  2.9611570E-03,  2.9912324E-03,  3.1150193E-03,
 3.2610145E-03,  3.4071855E-03,  3.5717432E-03,  3.7372755E-03,  3.9095484E-03,
 4.0885092E-03,  4.2712017E-03,  6.4377777E-03,  1.2269204E-02,  2.0016752E-02,
 2.8669314E-02,  3.6977980E-02,  4.8822771E-02,  4.3513146E-02,  2.8785467E-02,
 1.6757407E-03,  1.6839622E-03,  1.6921837E-03,  1.7004052E-03,  1.7086267E-03,
 1.7168482E-03,  1.7250698E-03,  1.7332913E-03,  1.7415128E-03,  1.7497343E-03,
 1.7579558E-03,  1.8042052E-03,  1.8847145E-03,  1.9747558E-03,  2.0665242E-03,
 2.1663515E-03,  2.2682125E-03,  2.3741105E-03,  2.4840772E-03,  2.5971324E-03,
 3.9527222E-03,  7.8733232E-03,  1.3528940E-02,  2.0530845E-02,  2.8124822E-02,
 4.3318170E-02,  4.5064473E-02,  3.4745272E-02,  1.0067245E-03,  1.0117210E-03,
 1.0167174E-03,  1.0217139E-03,  1.0267104E-03,  1.0317068E-03,  1.0367033E-03,
 1.0416997E-03,  1.0466962E-03,  1.0516927E-03,  1.0566891E-03,  1.0950643E-03,
 1.1462190E-03,  1.2017244E-03,  1.2588651E-03,  1.3198301E-03,  1.3825751E-03,
 1.4478029E-03,  1.5155576E-03,  1.5855351E-03,  2.4331310E-03,  5.0206427E-03,
 9.0124483E-03,  1.4371127E-02,  2.0745127E-02,  3.6609014E-02,  4.3725435E-02,
 3.8682725E-02 };

alpha = { 1.0000000E-02,  2.0000000E-02,  4.0000000E-02,  6.0000000E-02,  8.0000000E-02,
 2.0000000E-01,  4.0000000E-01,  6.0000000E-01,  8.0000000E-01,  2.0000000E+00,
 4.0000000E+00,  6.0000000E+00,  8.0000000E+00,  1.0000000E+01,  1.5000000E+01,
 2.0000000E+01,  2.5000000E+01,  3.0000000E+01,  3.5000000E+01,  4.0000000E+01,
 4.5000000E+01,  5.0000000E+01};

beta = {  0.0000000E+00,  1.0000000E-02,  2.0000000E-02,  3.0000000E-02,  4.0000000E-02,
 5.0000000E-02,  6.0000000E-02,  7.0000000E-02,  8.0000000E-02,  9.0000000E-02,
 1.0000000E-01,  2.0000000E-01,  3.0000000E-01,  4.0000000E-01,  5.0000000E-01,
 6.0000000E-01,  7.0000000E-01,  8.0000000E-01,  9.0000000E-01,  1.0000000E+00,
 2.0000000E+00,  4.0000000E+00,  6.0000000E+00,  8.0000000E+00,  1.0000000E+01,
 1.5000000E+01,  2.0000000E+01,  2.5000000E+01 };


      std::vector<double> symSab( alpha.size()*beta.size(), 0.0 );

      output = contin( nphon, delta, tbeta, scaling, tev, sc, rho, alpha, beta, symSab );
      THEN( "contin output matches expected value" ){
        lambda_s =   0.2352041964494244, t_bar = 1.9344942054735312;
        REQUIRE(ranges::equal(sabCorrect, symSab, equal));
        REQUIRE(lambda_s == Approx(std::get<0>(output)).epsilon(1e-6));
        REQUIRE(t_bar    == Approx(std::get<1>(output)).epsilon(1e-6));
      } // THEN
    } // WHEN




  } // GIVEN 

  GIVEN( "Beryllium metal example" ){

    alpha = {
3.052968E-03, 4.022632E-03, 
6.084044E-03, 8.016418E-03, 
1.212446E-02, 1.597535E-02, 
2.416197E-02, 3.183614E-02, 
4.815068E-02, 6.344398E-02, 
9.595606E-02, 1.264330E-01, 
1.912240E-01, 2.519593E-01, 
3.810768E-01, 5.021119E-01, 
7.594208E-01, 1.000623E+00, 
1.513396E+00, 1.994071E+00, 
3.015939E+00, 3.973842E+00, 
6.010250E+00, 7.919187E+00, 
1.197740E+01, 1.578158E+01, 
2.386891E+01, 3.145000E+01, 
4.756666E+01, 6.267447E+01, 
6.714871E+01, 8.847604E+01 };

beta = {
0.000000E+00, 1.091104E-01, 
3.000536E-01, 3.818864E-01, 
5.728296E-01, 6.546624E-01, 
8.456056E-01, 9.274384E-01, 
1.118382E+00, 1.200214E+00, 
1.391158E+00, 1.472990E+00, 
1.663934E+00, 1.745766E+00, 
1.936710E+00, 2.018542E+00, 
2.209486E+00, 2.291318E+00, 
2.482262E+00, 2.564094E+00, 
2.755038E+00, 2.836870E+00, 
3.027814E+00, 3.109647E+00, 
3.300590E+00, 3.382423E+00, 
4.536305E+00, 5.358183E+00, 
7.902297E+00, 9.334018E+00, 
1.376589E+01, 1.625997E+01, 
2.398035E+01, 2.832506E+01, 
4.177405E+01, 4.934258E+01, 
7.277088E+01, 8.595535E+01, 
1.267677E+02, 1.497352E+02, 
1.673147E+02, 1.976285E+02 };
    delta = 0.00069552; 

rho = {
0.0000E+00, 7.2477E-04, 3.7084E-03, 8.0087E-03, 
1.0642E-02, 1.5897E-02, 2.7372E-02, 4.1843E-02, 
5.0214E-02, 6.5036E-02, 8.3674E-02, 9.9329E-02, 
1.1977E-01, 1.4296E-01, 1.6484E-01, 1.8945E-01, 
2.1887E-01, 2.3537E-01, 2.6166E-01, 3.0003E-01, 
3.4054E-01, 3.8728E-01, 4.2481E-01, 4.7598E-01, 
5.1890E-01, 5.7400E-01, 6.2970E-01, 6.5754E-01, 
7.2042E-01, 7.9118E-01, 8.6756E-01, 9.2948E-01, 
1.0030E+00, 1.1163E+00, 1.2048E+00, 1.2870E+00, 
1.4139E+00, 1.5249E+00, 1.6221E+00, 1.7638E+00, 
1.8924E+00, 2.0388E+00, 2.2056E+00, 2.3709E+00, 
2.5558E+00, 2.7595E+00, 3.0108E+00, 3.2603E+00, 
3.5066E+00, 3.7442E+00, 4.0067E+00, 4.3677E+00, 
4.7164E+00, 5.0820E+00, 5.5881E+00, 6.0898E+00, 
6.5510E+00, 7.0877E+00, 7.5931E+00, 8.0736E+00, 
8.6232E+00, 9.2283E+00, 9.9334E+00, 1.0613E+01, 
1.1278E+01, 1.1973E+01, 1.2784E+01, 1.3744E+01, 
1.4739E+01, 1.5918E+01, 1.7654E+01, 1.9834E+01, 
2.1455E+01, 2.2574E+01, 2.3744E+01, 2.4900E+01, 
2.6227E+01, 2.7931E+01, 2.9747E+01, 2.9884E+01, 
2.7358E+01, 2.4817E+01, 2.3690E+01, 2.3242E+01, 
2.3624E+01, 2.3473E+01, 2.2368E+01, 2.1447E+01, 
2.0724E+01, 2.1121E+01, 2.4240E+01, 2.7607E+01, 
2.7643E+01, 2.5431E+01, 2.3755E+01, 2.3377E+01, 
2.3410E+01, 2.3504E+01, 2.3647E+01, 2.3681E+01, 
2.3805E+01, 2.3714E+01, 2.3385E+01, 2.3050E+01, 
2.2244E+01, 2.1008E+01, 1.9536E+01, 1.8341E+01, 
1.8075E+01, 1.8606E+01, 1.9599E+01, 2.1037E+01, 
2.3193E+01, 2.4016E+01, 2.3573E+01, 2.5664E+01, 
3.0187E+01, 3.1256E+01, 2.7257E+01, 2.2765E+01, 
1.4893E+01, 6.8192E+00, 3.8444E+00, 2.4718E+00, 
1.3358E+00, 3.5968E-01, 0.0000E+00 };
std::vector<double> everyFifthValue = {
 7.5283412E-05, 
 1.2711582E-04, 
 3.1542073E-04, 
 1.0271646E-03, 
 7.1795746E-04, 
 5.8104582E-05, 
 3.5883363E-18, 
 0.0000000E+00, 
 0.0000000E+00, 
 1.3828939E-04, 
 2.7219864E-04, 
 7.7999039E-04, 
 1.1372138E-03, 
 8.2706368E-04, 
 3.0045583E-10, 
 0.0000000E+00, 
 0.0000000E+00, 
 1.4677892E-04, 
 2.9503560E-04, 
 7.3494329E-04, 
 2.0824076E-03, 
 1.3282748E-03, 
 2.0296127E-06, 
 7.1696969E-20, 
 0.0000000E+00, 
 0.0000000E+00, 
 3.1193140E-04, 
 6.0797282E-04, 
 2.2935775E-03, 
 2.1529165E-03, 
 9.2469185E-04, 
 1.4455514E-10, 
 0.0000000E+00, 
 0.0000000E+00, 
 3.9151777E-04, 
 6.5219522E-04, 
 2.0432094E-03, 
 3.4939723E-03, 
 2.1153761E-03, 
 5.8183677E-06, 
 8.4115696E-27, 
 0.0000000E+00, 
 3.9372066E-04, 
 6.6308866E-04, 
 1.6404039E-03, 
 5.3360903E-03, 
 3.7315555E-03, 
 3.0745301E-04, 
 1.4051838E-14, 
 0.0000000E+00, 
 0.0000000E+00, 
 8.2783047E-04, 
 1.6220897E-03, 
 4.6348330E-03, 
 6.7561910E-03, 
 4.9190808E-03, 
 6.4536376E-08, 
 2.7506944E-29, 
 0.0000000E+00, 
 7.6778451E-04, 
 1.5319244E-03, 
 3.7970759E-03, 
 1.0741014E-02, 
 6.8592547E-03, 
 5.4814087E-05, 
 1.1281742E-15, 
 0.0000000E+00, 
 0.0000000E+00, 
 1.8573860E-03, 
 3.5907717E-03, 
 1.3473335E-02, 
 1.2654748E-02, 
 5.4719097E-03, 
 3.4212276E-08, 
 0.0000000E+00, 
 0.0000000E+00, 
 2.0329994E-03, 
 3.3549164E-03, 
 1.0407335E-02, 
 1.7774524E-02, 
 1.0801505E-02, 
 1.5545181E-04, 
 6.3745643E-21, 
 0.0000000E+00, 
 2.3547376E-03, 
 3.9055689E-03, 
 9.4863167E-03, 
 3.0648159E-02, 
 2.1496734E-02, 
 1.9665172E-03, 
 1.0856349E-10, 
 0.0000000E+00, 
 0.0000000E+00, 
 4.2546416E-03, 
 8.1541790E-03, 
 2.2965043E-02, 
 3.3442754E-02, 
 2.4487957E-02, 
 8.8407802E-06, 
 4.0192620E-22, 
 0.0000000E+00, 
 4.5841441E-03, 
 8.7662163E-03, 
 2.1085004E-02, 
 5.9033275E-02, 
 3.7978272E-02, 
 1.8164923E-03, 
 4.8229523E-11, 
 0.0000000E+00, 
 0.0000000E+00, 
 9.2791477E-03, 
 1.7253670E-02, 
 6.2998241E-02, 
 5.9360826E-02, 
 2.6549208E-02, 
 6.7269306E-06, 
 8.5187988E-30, 
 0.0000000E+00, 
 1.1552900E-02, 
 1.8108673E-02, 
 5.2977839E-02, 
 8.9762789E-02, 
 5.5839983E-02, 
 4.8217939E-03, 
 2.6478872E-14, 
 0.0000000E+00, 
 1.1814779E-02, 
 1.8383916E-02, 
 4.1028647E-02, 
 1.2795885E-01, 
 9.1201426E-02, 
 1.2632647E-02, 
 3.9656608E-07, 
 0.0000000E+00, 
 0.0000000E+00, 
 2.2313105E-02, 
 3.8247338E-02, 
 9.8891008E-02, 
 1.4311056E-01, 
 1.0857625E-01, 
 1.4526523E-03, 
 3.1375827E-14, 
 0.0000000E+00, 
 2.1595235E-02, 
 3.5465253E-02, 
 7.4706130E-02, 
 1.9805572E-01, 
 1.3268877E-01, 
 3.2489831E-02, 
 8.0477844E-07, 
 0.0000000E+00, 
 0.0000000E+00, 
 3.9472506E-02, 
 6.1781256E-02, 
 1.9163408E-01, 
 1.8491842E-01, 
 1.0062804E-01, 
 2.4083689E-03, 
 3.9977659E-18, 
 0.0000000E+00, 
 3.9974702E-02, 
 5.3973227E-02, 
 1.2378284E-01, 
 2.0082079E-01, 
 1.4152312E-01, 
 6.2597619E-02, 
 3.8849350E-08, 
 0.0000000E+00, 
 3.7724477E-02, 
 4.9981769E-02, 
 8.1480580E-02, 
 2.0200806E-01, 
 1.6294781E-01, 
 7.2412688E-02, 
 1.5732148E-03, 
 4.6410015E-17, 
 0.0000000E+00, 
 4.3096865E-02, 
 5.8738857E-02, 
 1.0883986E-01, 
 1.5263785E-01, 
 1.3816393E-01, 
 5.2669905E-02, 
 4.1376406E-07, 
 0.0000000E+00, 
 2.7953243E-02, 
 3.6998445E-02, 
 5.3178954E-02, 
 9.9578680E-02, 
 9.0087849E-02, 
 1.0398352E-01, 
 7.1167443E-03, 
 7.0670692E-21, 
 0.0000000E+00, 
 2.2712280E-02, 
 2.9172711E-02, 
 5.0649909E-02, 
 5.7584239E-02, 
 5.8688458E-02, 
 7.4243239E-02, 
 7.3532434E-08, 
 0.0000000E+00, 
 7.6529410E-03, 
 9.9034023E-03, 
 1.4099928E-02, 
 1.8851097E-02, 
 2.2768169E-02, 
 4.1601218E-02, 
 9.5696189E-03, 
 1.0622163E-17, 
 2.5485651E-03, 
 3.4389084E-03, 
 4.7703359E-03, 
 6.4951485E-03, 
 8.4344377E-03, 
 1.0292179E-02, 
 5.8912449E-02, 
 9.1493040E-06, 
 0.0000000E+00, 
 4.1451254E-04, 
 5.8655658E-04, 
 7.8179875E-04, 
 1.0786136E-03, 
 1.3973144E-03, 
 7.2032825E-03, 
 3.9123676E-02, 
 7.6297565E-20, 
 5.8960262E-05, 
 8.4287783E-05, 
 1.1327404E-04, 
 1.5861930E-04, 
 2.0925131E-04, 
 4.2545863E-04, 
 1.2342884E-02, 
 2.4230626E-05, 
 0.0000000E+00, 
 1.7055549E-06, 
 2.3102258E-06, 
 3.2760332E-06, 
 4.3853155E-06, 
 6.1329960E-06, 
 7.2537138E-05, 
 3.1377504E-02, 
 2.0528612E-13, 
 4.6168671E-08, 
 6.2768639E-08, 
 8.9550857E-08, 
 1.2067103E-07, 
 1.7037299E-07, 
 4.8904556E-07, 
 3.2199683E-04, 
 6.7891713E-03, 
 1.4312882E-08, 
 1.9762213E-08, 
 2.8268511E-08,  
 3.8189090E-08,  
 5.4098577E-08,  
 7.2482021E-08,  
 5.3265919E-06,  
 1.3438255E-02,  
 1.1180888E-10,  
 1.3558985E-10,  
 1.9458614E-10,  
 2.6387490E-10,  
 3.7592366E-10,  
 5.0661240E-10,  
 4.5041200E-09,  
 8.1017335E-06,  
 1.6896544E-03
};

    nphon = 100; 
    tbeta = 1.0; tev = 2.5507297688E-2; 
    sc = 0.0253/tev; scaling = sc;

      std::vector<double> symSab( alpha.size()*beta.size(), 0.0 );

      output = contin( nphon, delta, tbeta, scaling, tev, sc, rho, alpha, beta, symSab );


    THEN( "contin output matches expected value" ){
      lambda_s = 0.60333890798030132; t_bar = 1.4641327610045163;
      for (size_t i = 0; i < everyFifthValue.size(); ++i ){ 
        REQUIRE( symSab[5*i] == Approx(everyFifthValue[i]).epsilon(1e-6) );
      }
      std::vector<double> sab_alpha__0_beta_0_to_199= {
 7.5283412E-05,
 7.6306207E-05,
 9.8561229E-05,
 9.6293533E-05,
 7.3655687E-05,
 7.0755997E-05,
 8.4907156E-05,
 9.6762658E-05,
 9.1106769E-05,
 9.3794504E-05,
 9.8861939E-05,
 9.8715329E-05,
 1.0102118E-04,
 1.0401101E-04,
 1.0497140E-04,
 1.0634887E-04,
 1.0916120E-04,
 1.0618205E-04,
 1.0604782E-04,
 1.0990834E-04,
 1.1403281E-04,
 1.1892246E-04,
 1.2092385E-04,
 1.2492103E-04,
 1.2711582E-04,
 1.3070397E-04,
 1.3427886E-04,
 1.3284986E-04,
 1.3549152E-04,
 1.4018524E-04,
 1.4527924E-04,
 1.4818347E-04,
 1.5147086E-04,
 1.5903794E-04,
 1.6472040E-04,
 1.6831986E-04,
 1.7534873E-04,
 1.8186984E-04,
 1.8612433E-04,
 1.9294974E-04,
 1.9967865E-04,
 2.0666323E-04,
 2.1500712E-04,
 2.2325414E-04,
 2.3202337E-04,
 2.4184843E-04,
 2.5419246E-04,
 2.6704662E-04,
 2.7885033E-04,
 2.8938739E-04,
 3.0017324E-04,
 3.1542073E-04,
 3.3208070E-04,
 3.4814590E-04,
 3.6934767E-04,
 3.9318180E-04,
 4.1417689E-04,
 4.3563371E-04,
 4.5703223E-04,
 4.7572939E-04,
 4.9502418E-04,
 5.1694424E-04,
 5.4224716E-04,
 5.6836340E-04,
 5.9227921E-04,
 6.1557430E-04,
 6.4158400E-04,
 6.7313442E-04,
 7.0808202E-04,
 7.4669219E-04,
 8.0058852E-04,
 8.7589256E-04,
 9.4837938E-04,
 9.9440572E-04,
 1.0271646E-03,
 1.0598031E-03,
 1.0939630E-03,
 1.1375623E-03,
 1.1908518E-03,
 1.2188570E-03,
 1.1645724E-03,
 1.0467222E-03,
 9.5203164E-04,
 9.0375349E-04,
 8.8419258E-04,
 8.7855035E-04,
 8.4871566E-04,
 7.9900306E-04,
 7.5732520E-04,
 7.3361959E-04,
 7.6545529E-04,
 8.6354195E-04,
 9.3300600E-04,
 9.0127884E-04,
 8.2211412E-04,
 7.6857001E-04,
 7.5018924E-04,
 7.4237797E-04,
 7.3655843E-04,
 7.3125980E-04,
 7.2416920E-04,
 7.1795746E-04,
 7.0544480E-04,
 6.8768061E-04,
 6.6756536E-04,
 6.3475961E-04,
 5.9159370E-04,
 5.4526415E-04,
 5.1046727E-04,
 5.0110112E-04,
 5.1203353E-04,
 5.3497033E-04,
 5.7010093E-04,
 6.1660447E-04,
 6.2799607E-04,
 6.1735921E-04,
 6.7075184E-04,
 7.7032694E-04,
 7.7894380E-04,
 6.7160441E-04,
 5.4943933E-04,
 3.5280990E-04,
 1.6180847E-04,
 9.1143323E-05,
 5.8104582E-05,
 3.1103664E-05,
 8.5003482E-06,
 3.2494472E-07,
 3.8527005E-07,
 4.5143709E-07,
 4.9921696E-07,
 5.1189015E-07,
 5.0385038E-07,
 4.5546912E-07,
 3.7051610E-07,
 2.2867582E-07,
 1.3177044E-07,
 6.2056816E-08,
 1.5694096E-09,
 2.1328977E-10,
 1.8280218E-10,
 1.3140185E-10,
 7.5689487E-11,
 3.0420064E-11,
 7.8913565E-12,
 3.0657207E-13,
 3.9004884E-14,
 1.9023334E-14,
 6.0817173E-15,
 1.0024328E-15,
 3.2643250E-17,
 3.5883363E-18,
 8.3454570E-19,
 8.1993137E-20,
 1.4680078E-21,
 1.7094552E-22,
 1.4231010E-23,
 2.4120059E-25,
 1.0890642E-26,
 4.1106828E-28,
 2.8863032E-30,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00,
 0.0000000E+00
  };

     // checkPartOfVec(symSab,sab_alpha__0_beta_0_to_199,0);
      //checkPartOfVec(symSab,sab_alpha_50_beta_0_to_199,50*beta.size());
      REQUIRE(lambda_s == Approx(std::get<0>(output)).epsilon(1e-6));
      REQUIRE(t_bar    == Approx(std::get<1>(output)).epsilon(1e-6));
    } // THEN


  } // GIVEN 




} // TEST CASE 
/*










TEST_CASE( "contin old" ){

  int nphon;
  double delta, tbeta, tev, sc, scaling, lambda_s, t_eff;
  std::vector<double> alpha, beta, rho, expected;
  std::tuple<double,double> output;

  GIVEN( "input values from input card and leapr subroutine" ){
    nphon = 3; 
    delta = 0.1; tbeta = 1.0; tev = 0.01723477; sc = 0.0253/tev; scaling = sc;
    alpha = { 0.01, 0.02, 0.04, 0.08, 0.16, 0.32, 0.64, 1.28};
    beta  = { 0.00, 0.15, 0.30, 0.60, 1.20 };
    rho   = { 0.002, 0.004, 0.02, 0.04, 0.2, 0.4 };

    WHEN( "3rd order expansion, with alpha & beta vals scaled by 0.0253/tev" ){

      std::vector<double> symSab( alpha.size()*beta.size(), 0.0 );

      output = contin( nphon, delta, tbeta, scaling, tev, sc, rho,
          alpha, beta, symSab );

      THEN( "contin output matches expected value" ){
        lambda_s = 4.38473153E-2, t_eff = 12.279863466;
        expected = {6.474331963E-7, 7.658564709E-7, 8.842797456E-7,
          1.121126294E-6, 1.594819393E-6, 1.294036143E-6, 1.530731302E-6,
          1.767426462E-6, 2.240816781E-6, 3.187597419E-6, 2.584754483E-6,
          3.057539823E-6, 3.530325163E-6, 4.475895844E-6, 6.367037205E-6,
          5.156263261E-6, 6.099418664E-6, 7.042574067E-6, 8.928884872E-6,
          1.270150648E-5, 1.025974716E-5, 1.213643384E-5, 1.401312052E-5,
          1.776649387E-5, 2.527324059E-5, 2.030999488E-5, 2.402516585E-5,
          2.774033682E-5, 3.517067875E-5, 5.003136263E-5, 3.979478204E-5,
          4.707463949E-5, 5.435449694E-5, 6.891421183E-5, 9.803364162E-5,
          7.638863877E-5, 9.036457859E-5, 1.043405184E-4, 1.322923980E-4,
          1.881961573E-4};
        REQUIRE(ranges::equal(expected, symSab, equal));
        REQUIRE(lambda_s == Approx(std::get<0>(output)).epsilon(1e-6));
        REQUIRE(t_eff    == Approx(std::get<1>(output)).epsilon(1e-6));
      } // THEN
    } // WHEN

    WHEN( "6th order exp, alpha & beta vals scaled, and small grid space" ){
      nphon = 6; delta = 0.04; sc = 1.0; scaling = 1.0;
      alpha =  { 0.1, 0.2, 0.4, 0.8, 1.6 };

      std::vector<double> symSab( alpha.size()*beta.size(), 0.0 );

      output = contin( nphon, delta, tbeta, scaling, tev, sc, rho,
          alpha, beta, symSab );

      THEN( "contin output matches expected value" ){
        lambda_s = 0.11157823, t_eff = 4.91699518;
        expected = {6.82096404E-5, 7.51470660E-5, 8.20844916E-5, 9.59593429E-5,
         1.23709045E-4, 1.34940719E-4, 1.48666045E-4, 1.62391372E-4,
          1.89842025E-4, 2.44743331E-4, 2.64063030E-4, 2.90925221E-4,
          3.17787412E-4, 3.71511794E-4, 4.78960557E-4, 5.05599918E-4,
          5.57045626E-4, 6.08491333E-4, 7.11382748E-4, 9.17165579E-4,
          9.26780041E-4, 1.02112863E-3, 1.11547723E-3, 1.30417442E-3,
          1.68156881E-3};
        REQUIRE(ranges::equal(expected, symSab, equal));
        REQUIRE(lambda_s == Approx(std::get<0>(output)).epsilon(1e-6));
        REQUIRE(t_eff    == Approx(std::get<1>(output)).epsilon(1e-6));

      } // THEN
    } // WHEN

    WHEN( "6th order exp, user-defined normalizationand large grid space" ){
      delta = 4.; tbeta = 2.0; sc = 1.0; scaling = 1.0;
      alpha = { 0.1, 0.2, 0.4, 0.8, 1.6 };

      std::vector<double> symSab( alpha.size()*beta.size(), 0.0 );

      output = contin( nphon, delta, tbeta, scaling, tev, sc, rho,
        alpha, beta, symSab );

      THEN( "contin output matches expected value" ){

        lambda_s = 2.179428E-3; t_eff = 491.1882921;
        expected = {1.37883996E-10, 1.58477481E-10, 1.79070966E-10,
          2.20257936E-10, 3.02631876E-10, 2.75707903E-10, 3.16885898E-10,
          3.58063894E-10, 4.40419886E-10, 6.05131869E-10, 5.51175522E-10,
          6.33495628E-10, 7.15815735E-10, 8.80455949E-10, 1.20973637E-09,
          1.10139053E-09, 1.26588730E-09, 1.43038407E-09, 1.75937760E-09,
          2.41736468E-09, 2.19894405E-09, 2.52736456E-09, 2.85578506E-09,
          3.51262608E-09, 4.82630810E-09};
        REQUIRE(ranges::equal(expected, symSab, equal));
        REQUIRE(lambda_s == Approx(std::get<0>(output)).epsilon(1e-6));
        REQUIRE(t_eff    == Approx(std::get<1>(output)).epsilon(1e-6));


      } // THEN
    } // WHEN
  } // GIVEN


  GIVEN( "simplified water model (test case #9)" ){
    nphon = 100; 
    delta = 0.00255; tbeta = 0.444444; tev = 2.55074596e-2; sc = 0.99186670867058835;
    scaling = 0.99186670867058835;
    std::vector<double> alpha { 0.01008, 0.015, 0.0252, 0.033, 0.050406, 0.0756,
      0.100812, 0.151218, 0.201624, 0.252030, 0.302436, 0.352842, 0.403248,
      0.453654, 0.504060, 0.554466, 0.609711, 0.670259, 0.736623, 0.809349,
      0.889061, 0.976435, 1.072130, 1.177080, 1.292110, 1.418220, 1.556330,
      1.707750, 1.873790, 2.055660, 2.255060, 2.473520, 2.712950, 2.975460,
      3.263080, 3.578320, 3.923900, 4.302660, 4.717700, 5.172560, 5.671180,
      6.217580, 6.816500, 7.472890, 8.192280, 8.980730, 9.844890, 10.79190,
      11.83030, 12.96740, 14.21450, 15.58150, 17.07960, 18.72080, 20.52030,
      22.49220, 24.65260, 27.02160, 29.61750, 32.46250, 35.58160, 38.99910,
      42.74530, 46.85030, 50.0 },
    beta { 0.000000, 0.006375, 0.012750, 0.025500, 0.038250, 0.051000, 0.065750,
      .0806495, 0.120974, 0.161299, 0.241949, 0.322598, 0.403248, 0.483897,
      0.564547, 0.645197, 0.725846, 0.806496, 0.887145, 0.967795, 1.048440,
      1.129090, 1.209740, 1.290390, 1.371040, 1.451690, 1.532340, 1.612990,
      1.693640, 1.774290, 1.854940, 1.935590, 2.016240, 2.096890, 2.177540,
      2.258190, 2.338840, 2.419490, 2.500140, 2.580790, 2.669500, 2.767090,
      2.874450, 2.992500, 3.122350, 3.265300, 3.422470, 3.595360, 3.785490,
      3.994670, 4.224730, 4.477870, 4.756310, 5.062580, 5.399390, 5.769970,
      6.177660, 6.626070, 7.119240, 7.661810, 8.258620, 8.915110, 9.637220,
      10.43200, 11.30510, 12.26680, 13.32430, 14.48670, 15.76600, 17.17330,
      18.72180, 20.42450, 22.29760, 24.35720, 25.0 },
    rho { 0.0, 0.0005, 0.001, 0.002, 0.0035, 0.005, 0.0075, 0.01, 0.013, 0.0165,
      0.02, 0.0245, 0.029, 0.034, 0.0395, 0.045, 0.0506, 0.0562, 0.0622, 0.0686,
      0.075, 0.083, 0.091, 0.099, 0.107, 0.115, 0.1197, 0.1214, 0.1218, 0.1195,
      0.1125, 0.1065, 0.1005, 0.09542, 0.09126, 0.0871, 0.0839, 0.0807, 0.07798,
      0.07574, 0.0735, 0.07162, 0.06974, 0.06804, 0.06652, 0.065, 0.0634,
      0.0618, 0.06022, 0.05866, 0.0571, 0.05586, 0.05462, 0.0535, 0.0525,
      0.0515, 0.05042, 0.04934, 0.04822, 0.04706, 0.0459, 0.04478, 0.04366,
      0.04288, 0.04244, 0.042, 0.0 };

    WHEN( "  " ){

      std::vector<double> symSab( alpha.size()*beta.size(), 0.0 );

      output = contin( nphon, delta, tbeta, scaling, tev, sc, rho,
          alpha, beta, symSab );
      std::vector<double> correct_beta_0_to_49_alpha_0 { 5.70056684e-4,
      5.71888708e-4, 5.73720731e-4, 5.77384778e-4, 5.81048825e-4, 5.84712872e-4,
      5.88951672e-4, 5.93233434e-4, 5.42056424e-4, 4.28244768e-4, 3.06057223e-4,
      2.95212184e-4, 3.02663494e-4, 2.92398496e-4, 3.05536548e-4, 3.19025735e-4,
      3.26220873e-4, 3.36551155e-4, 3.49179421e-4, 3.57425983e-4, 3.68816500e-4,
      3.83479183e-4, 3.94402857e-4, 4.06891766e-4, 4.20261279e-4, 4.32403821e-4,
      4.42685821e-4, 4.51880855e-4, 4.59388249e-4, 4.67775528e-4, 4.76936118e-4,
      4.86243516e-4, 4.94620894e-4, 5.09851031e-4, 5.23765935e-4, 5.36531286e-4,
      5.48284769e-4, 5.59147457e-4, 5.69019309e-4, 5.68792651e-4, 5.58615581e-4,
      5.39897095e-4, 5.12131779e-4, 4.64702762e-4, 4.11176570e-4, 3.61173172e-4,
      3.17924984e-4, 2.79777761e-4, 2.46493592e-4, 2.18291694e-4 },
      correct_beta_0_to_49_alpha_29 { 7.68099243e-2, 7.70496243e-2,
      7.72893244e-2, 7.77687244e-2, 7.82481245e-2, 7.87275245e-2, 7.92821246e-2,
      7.98423458e-2, 7.34097422e-2, 5.90448823e-2, 4.36514932e-2, 4.23617235e-2,
      4.34464736e-2, 4.23196096e-2, 4.41562638e-2, 4.60477871e-2, 4.71519543e-2,
      4.86511099e-2, 5.04440988e-2, 5.16881615e-2, 5.33320390e-2, 5.53918648e-2,
      5.69835987e-2, 5.87731321e-2, 6.06744252e-2, 6.24198691e-2, 6.39279453e-2,
      6.52948011e-2, 6.64468553e-2, 6.77102160e-2, 6.90717811e-2, 7.04534180e-2,
      7.17207122e-2, 7.38571845e-2, 7.58283127e-2, 7.76512733e-2, 7.93411960e-2,
      8.09124408e-2, 8.23410247e-2, 8.24717121e-2, 8.13342100e-2, 7.90998261e-2,
      7.56977801e-2, 6.97809264e-2, 6.30729464e-2, 5.68179991e-2, 5.14305358e-2,
      4.66982829e-2, 4.25772650e-2, 3.90777534e-2 },
      correct_beta_49_to_74_alpha_64 { 5.01200422e-3, 5.39761518e-3,
      5.84469397e-3, 6.36259633e-3, 6.96450163e-3, 7.66484981e-3, 8.48120780e-3,
      9.43557399e-3, 1.05492961e-2, 1.18545543e-2, 1.33788191e-2, 1.51495464e-2,
      1.71949379e-2, 1.95388039e-2, 2.21987489e-2, 2.51587327e-2, 2.83866371e-2,
      3.17936243e-2, 3.52301989e-2, 3.84774693e-2, 4.12313570e-2, 4.31193070e-2,
      4.37377893e-2, 4.27276040e-2, 3.98732704e-2, 3.86829542e-2 };

      THEN( "contin output matches expected value" ){
        lambda_s =   0.23520650571218535; t_eff = 1.9344846581861184;
        REQUIRE( lambda_s == Approx(std::get<0>(output)).epsilon(1e-6) );
        REQUIRE( t_eff    == Approx(std::get<1>(output)).epsilon(1e-6) );
        for ( size_t b = 0; b < correct_beta_0_to_49_alpha_0.size(); ++b ){
          REQUIRE( correct_beta_0_to_49_alpha_0[b] == Approx(symSab[b]).epsilon(1e-6) );
        }
        for ( size_t b = 0; b < correct_beta_0_to_49_alpha_29.size(); ++b ){
          REQUIRE( correct_beta_0_to_49_alpha_29[b] == Approx(symSab[b+29.0*beta.size()]).epsilon(1e-6) );
        }
        //std::cout << symSab[64+64*beta.size()] << std::endl;
        //for ( size_t i = 0; i < correct_beta_49_to_74_alpha_64.size(); ++i ){
        //  REQUIRE( correct_beta_49_to_74_alpha_64[i] == Approx(symSab[49+i+64*beta.size()]).epsilon(1e-6) );
        //}
        REQUIRE(lambda_s == Approx(std::get<0>(output)).epsilon(1e-6));
        REQUIRE(t_eff    == Approx(std::get<1>(output)).epsilon(1e-6));


      } // THEN
    } // WHEN
  } // GIVEN

  GIVEN( "extremely simplified water model (test case #9) (simplifiedLeaprInput)" ){
    nphon = 6; 
    delta = 0.00255; tbeta = 0.444444; tev = 2.55074596e-2; sc = 0.99186670867058835;
    scaling = 0.99186670867058835;
    std::vector<double> alpha { 0.01008, 0.015, 0.0252, 0.033, 0.050406, 0.0756 };
    std::vector<double> beta { 0.0, 0.006375, 0.01275, 0.0255, 0.03825, 0.051, 0.06575 };
    std::vector<double> rho { 0.0, 0.0005, 0.001, 0.002, 0.0035, 0.005, 0.0075, 0.01, 0.013, 0.0165 };

    WHEN( "  " ){
      std::vector<double> symSab( alpha.size()*beta.size(), 0.0 );

      output = contin( nphon, delta, tbeta, scaling, tev, sc, rho,
          alpha, beta, symSab );

      std::vector<double> expected { 4.2543261427413936e-2, 4.2677975670624702e-2,
        4.2812689913835460e-2, 4.3082118400256997e-2, 4.3351546886678527e-2,
        4.3620975373100043e-2, 4.3932667151509258e-2, 6.2405605186179013e-2,
        6.2601782824467045e-2, 6.2797960462755043e-2, 6.3190315739331079e-2,
        6.3582671015907102e-2, 6.3975026292483125e-2, 6.4428927494796562e-2,
        0.10177395635934081, 0.10208912917521698, 0.10240430199109316,
        0.10303464762284552, 0.10366499325459788, 0.10429533888635020,
        0.10502456226425980, 0.13029305403062777, 0.13069197038636696,
        0.13109088674210612, 0.13188871945358452, 0.13268655216506289,
        0.13348438487654118, 0.13440736781727111, 0.18926073679135993,
        0.18982576724110425, 0.19039079769084855, 0.19152085859033724,
        0.19265091948982599, 0.19378098038931460, 0.19508830574362507,
        0.26409668821687571, 0.26485736219135630, 0.26561803616583685,
        0.26713938411479798, 0.26866073206375923, 0.27018208001272020,
        0.27194207077720473 };
      THEN( "contin output matches expected value" ){
        lambda_s = 4.2065831071822970; t_eff = 1.0400408284374374;
        REQUIRE(ranges::equal(expected, symSab, equal));
        REQUIRE(lambda_s == Approx(std::get<0>(output)).epsilon(1e-6));
        REQUIRE(t_eff    == Approx(std::get<1>(output)).epsilon(1e-6));
      } // THEN
    } // WHEN
  } // GIVEN
  GIVEN( "extremely simplified water model (test case #9) (simplifiedLeaprInput)" ){
    nphon = 30; 
    delta = 0.00255; tbeta = 0.444444; tev = 2.55074596e-2; sc = 0.99186670867058835;
    scaling = 0.99186670867058835;
    std::vector<double> alpha { 0.01008, 0.015, 0.0252 },
      beta { 0.000000, 0.006375, 0.012750, 0.025500 },
      rho { 0.0, 0.0005, 0.001, 0.002, 0.0035, 0.005 };

    WHEN( "  " ){
      std::vector<double> symSab( alpha.size()*beta.size(), 0.0 );

      output = contin( nphon, delta, tbeta, scaling, tev, sc, rho,
          alpha, beta, symSab );

      std::vector<double> expected { 0.21338252777792166, 0.21401421222255254,
        0.21464589666718339, 0.21590926555644518, 0.30365460687728840,
        0.30451809601992325, 0.30538158516255781, 0.30710856344782711,
        0.46547917133239852, 0.46669713613840202, 0.46791510094440553,
        0.47035103055641264 };

      THEN( "contin output matches expected value" ){
        lambda_s = 14.500767787022335; t_eff = 1.0123228701111786;
        REQUIRE(ranges::equal(expected, symSab, equal));
        REQUIRE(lambda_s == Approx(std::get<0>(output)).epsilon(1e-6));
        REQUIRE(t_eff    == Approx(std::get<1>(output)).epsilon(1e-6));

      } // THEN
    } // WHEN
  } // GIVEN

} // TEST CASE









*/

/*







    alpha = { 0.01, 0.02, 0.04, 0.06, 0.08, 0.2, 0.4, 0.6, 0.8, 2, 4, 6, 8, 10, 
    15, 20, 25, 30, 35, 40, 45, 50 };
    beta  = { 0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10, 
    0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 2, 4, 6, 8, 10, 15, 20, 25 };
        sabCorrect = {
1.198806E+01, 1.151027E+01, 1.011033E+01, 8.124384E+00,
5.972583E+00, 4.016844E+00, 2.471541E+00, 1.391334E+00,
7.166783E-01, 3.377900E-01, 1.455441E-01, 3.443114E-04,
2.959533E-04, 2.972466E-04, 2.927358E-04, 3.099445E-04,
3.210825E-04, 3.333212E-04, 3.474389E-04, 3.575416E-04,
4.843253E-04, 2.158686E-04, 8.573138E-05, 1.348282E-07,
3.011002E-08, 5.473587E-12, 7.097249E-16, 4.783773E-19,
8.456649E+00, 8.290406E+00, 7.810704E+00, 7.004206E+00,
6.034757E+00, 4.950214E+00, 3.900485E+00, 2.926784E+00,
2.109113E+00, 1.447821E+00, 9.543308E-01, 1.953056E-03,
5.957128E-04, 5.916112E-04, 5.881931E-04, 6.171408E-04,
6.413179E-04, 6.656699E-04, 6.928767E-04, 7.140000E-04,
9.632252E-04, 4.315717E-04, 1.704386E-04, 5.444322E-07,
1.204047E-07, 4.393104E-11, 1.140011E-14, 8.451396E-18,
5.951683E+00, 5.911781E+00, 5.742959E+00, 5.456223E+00,
5.069769E+00, 4.607068E+00, 4.094516E+00, 3.558967E+00,
3.025455E+00, 2.515399E+00, 2.045391E+00, 7.711309E-02,
1.511814E-03, 1.177760E-03, 1.180961E-03, 1.227362E-03,
1.278109E-03, 1.327015E-03, 1.378889E-03, 1.423055E-03,
1.909414E-03, 8.625778E-04, 3.392110E-04, 2.201636E-06,
4.825303E-07, 3.535957E-10, 1.836235E-13, 1.603037E-16,
4.836988E+00, 4.819313E+00, 4.732622E+00, 4.580628E+00,
4.369736E+00, 4.108588E+00, 3.807487E+00, 3.477709E+00,
3.124572E+00, 2.764874E+00, 2.411429E+00, 2.740982E-01,
8.785451E-03, 1.805411E-03, 1.773121E-03, 1.834149E-03,
1.909624E-03, 1.983556E-03, 2.059067E-03, 2.126655E-03,
2.842554E-03, 1.293093E-03, 5.080061E-04, 4.987820E-06,
1.088953E-06, 1.200285E-09, 9.353550E-13, 9.393523E-16,
4.169686E+00, 4.159260E+00, 4.108113E+00, 4.017743E+00,
3.889820E+00, 3.711094E+00, 3.505821E+00, 3.279381E+00,
3.035979E+00, 2.770389E+00, 2.503235E+00, 4.965906E-01,
3.432618E-02, 3.033107E-03, 2.368598E-03, 2.438131E-03,
2.536132E-03, 2.635037E-03, 2.733770E-03, 2.824748E-03,
3.764120E-03, 1.723138E-03, 6.772315E-04, 8.911118E-06,
1.942595E-06, 2.860928E-09, 2.973824E-12, 3.378806E-15,
2.566515E+00, 2.567150E+00, 2.567775E+00, 2.547127E+00,
2.523860E+00, 2.482805E+00, 2.437046E+00, 2.377544E+00,
2.311861E+00, 2.236723E+00, 2.154538E+00, 1.161649E+00,
4.044151E-01, 9.377192E-02, 1.827180E-02, 7.125202E-03,
6.271873E-03, 6.440726E-03, 6.672804E-03, 6.901303E-03,
9.086144E-03, 4.293595E-03, 1.707866E-03, 5.648005E-05,
1.242401E-05, 4.608282E-08, 1.201042E-10, 2.339807E-13,
1.736637E+00, 1.739513E+00, 1.742344E+00, 1.745098E+00,
1.736422E+00, 1.727770E+00, 1.718990E+00, 1.699135E+00,
1.679443E+00, 1.659774E+00, 1.629751E+00, 1.228620E+00,
7.452045E-01, 3.639059E-01, 1.472945E-01, 5.362803E-02,
2.234571E-02, 1.445884E-02, 1.317297E-02, 1.333160E-02,
1.729224E-02, 8.537444E-03, 3.492408E-03, 2.268229E-04,
5.161941E-05, 3.854310E-07, 2.020721E-09, 6.815052E-12,
1.358352E+00, 1.361460E+00, 1.364483E+00, 1.367567E+00,
1.368184E+00, 1.363920E+00, 1.359682E+00, 1.355418E+00,
1.346317E+00, 1.334843E+00, 1.323521E+00, 1.115109E+00,
8.134520E-01, 5.146189E-01, 2.844467E-01, 1.412129E-01,
6.719741E-02, 3.513200E-02, 2.367041E-02, 2.051719E-02,
2.478945E-02, 1.272339E-02, 5.356675E-03, 5.082522E-04,
1.202699E-04, 1.353258E-06, 1.070715E-08, 5.212081E-11,
1.127784E+00, 1.130795E+00, 1.133857E+00, 1.136869E+00,
1.139828E+00, 1.138791E+00, 1.136531E+00, 1.134166E+00,
1.131813E+00, 1.126749E+00, 1.119349E+00, 9.982033E-01,
7.993163E-01, 5.740115E-01, 3.735455E-01, 2.223625E-01,
1.244507E-01, 6.967187E-02, 4.284843E-02, 3.159658E-02,
3.166057E-02, 1.684233E-02, 7.291326E-03, 8.964621E-04,
2.207100E-04, 3.324570E-06, 3.528871E-08, 2.265936E-10,
5.615963E-01, 5.637417E-01, 5.659341E-01, 5.681657E-01,
5.701322E-01, 5.719934E-01, 5.739024E-01, 5.754079E-01,
5.759345E-01, 5.765044E-01, 5.771225E-01, 5.702861E-01,
5.391492E-01, 4.906412E-01, 4.285365E-01, 3.618381E-01,
2.950289E-01, 2.347310E-01, 1.832928E-01, 1.428200E-01,
6.260580E-02, 3.971869E-02, 1.986445E-02, 5.185349E-03,
1.582003E-03, 6.103616E-05, 1.679331E-06, 2.796482E-08,
2.786825E-01, 2.796487E-01, 2.805274E-01, 2.814646E-01,
2.824463E-01, 2.834606E-01, 2.845061E-01, 2.855804E-01,
2.866857E-01, 2.879275E-01, 2.888230E-01, 2.958709E-01,
2.955275E-01, 2.916756E-01, 2.815516E-01, 2.684214E-01,
2.513828E-01, 2.327699E-01, 2.129484E-01, 1.932382E-01,
9.375113E-02, 6.878758E-02, 4.128874E-02, 1.748102E-02,
6.963285E-03, 5.635606E-04, 3.281444E-05, 1.189697E-06,
1.654863E-01, 1.662302E-01, 1.668640E-01, 1.672900E-01,
1.678076E-01, 1.683778E-01, 1.689812E-01, 1.696022E-01,
1.702562E-01, 1.710622E-01, 1.719524E-01, 1.780383E-01,
1.814163E-01, 1.835811E-01, 1.843112E-01, 1.824851E-01,
1.803673E-01, 1.749888E-01, 1.697576E-01, 1.627408E-01,
1.074858E-01, 8.560589E-02, 5.938991E-02, 3.231548E-02,
1.565039E-02, 2.000848E-03, 1.841559E-04, 1.075011E-05,
1.069925E-01, 1.074812E-01, 1.079939E-01, 1.085340E-01,
1.089325E-01, 1.092348E-01, 1.095475E-01, 1.099429E-01,
1.104875E-01, 1.110398E-01, 1.116035E-01, 1.158063E-01,
1.201593E-01, 1.228224E-01, 1.254852E-01, 1.262361E-01,
1.272378E-01, 1.277173E-01, 1.266239E-01, 1.254297E-01,
1.046955E-01, 9.201391E-02, 7.214651E-02, 4.642379E-02,
2.617871E-02, 4.702084E-03, 6.059558E-04, 5.010364E-05,
7.285511E-02, 7.320784E-02, 7.357808E-02, 7.396610E-02,
7.437223E-02, 7.478900E-02, 7.512271E-02, 7.546307E-02,
7.580526E-02, 7.614930E-02, 7.649977E-02, 7.978367E-02,
8.266811E-02, 8.552937E-02, 8.792582E-02, 8.984835E-02,
9.170801E-02, 9.308984E-02, 9.401100E-02, 9.488863E-02,
9.300469E-02, 9.099487E-02, 7.929319E-02, 5.790667E-02,
3.694963E-02, 8.732445E-03, 1.472702E-03, 1.605386E-04,
3.209484E-02, 3.225174E-02, 3.243138E-02, 3.265042E-02,
3.287230E-02, 3.309776E-02, 3.333163E-02, 3.357161E-02,
3.381946E-02, 3.400832E-02, 3.416695E-02, 3.553367E-02,
3.721905E-02, 3.850458E-02, 4.031047E-02, 4.182691E-02,
4.301362E-02, 4.467507E-02, 4.596326E-02, 4.757582E-02,
5.800531E-02, 7.264197E-02, 7.800827E-02, 7.157758E-02,
5.757664E-02, 2.299673E-02, 6.450885E-03, 1.180030E-03,
1.585746E-02, 1.593501E-02, 1.603197E-02, 1.613348E-02,
1.623548E-02, 1.633824E-02, 1.644222E-02, 1.654746E-02,
1.665473E-02, 1.676512E-02, 1.687983E-02, 1.761070E-02,
1.853378E-02, 1.915059E-02, 2.014400E-02, 2.102057E-02,
2.192803E-02, 2.266124E-02, 2.354795E-02, 2.454966E-02,
3.340098E-02, 4.990088E-02, 6.265118E-02, 6.764719E-02,
6.428494E-02, 3.799725E-02, 1.554587E-02, 4.158233E-03,
8.309487E-03, 8.350416E-03, 8.391614E-03, 8.433203E-03,
8.478255E-03, 8.529459E-03, 8.581045E-03, 8.634085E-03,
8.687943E-03, 8.742224E-03, 8.797051E-03, 9.216444E-03,
9.677827E-03, 1.009903E-02, 1.052049E-02, 1.110012E-02,
1.155566E-02, 1.209819E-02, 1.250892E-02, 1.303395E-02,
1.877963E-02, 3.183040E-02, 4.508473E-02, 5.517994E-02,
5.963544E-02, 4.817939E-02, 2.664615E-02, 9.638439E-03,
4.491474E-03, 4.513683E-03, 4.536035E-03, 4.558657E-03,
4.581385E-03, 4.604692E-03, 4.628396E-03, 4.655174E-03,
4.682084E-03, 4.709082E-03, 4.736267E-03, 4.976188E-03,
5.218672E-03, 5.470693E-03, 5.703736E-03, 5.983286E-03,
6.278097E-03, 6.554655E-03, 6.852782E-03, 7.116640E-03,
1.054800E-02, 1.954321E-02, 3.039274E-02, 4.109883E-02,
4.925100E-02, 5.150366E-02, 3.659972E-02, 1.700968E-02,
2.475734E-03, 2.488004E-03, 2.500338E-03, 2.512916E-03,
2.525556E-03, 2.538112E-03, 2.550732E-03, 2.563448E-03,
2.576230E-03, 2.590176E-03, 2.604210E-03, 2.738228E-03,
2.873094E-03, 3.013430E-03, 3.150108E-03, 3.300016E-03,
3.461571E-03, 3.623247E-03, 3.789502E-03, 3.956704E-03,
5.975177E-03, 1.174249E-02, 1.967432E-02, 2.883894E-02,
3.762083E-02, 4.890276E-02, 4.303324E-02, 2.477354E-02,
1.382081E-03, 1.388980E-03, 1.395914E-03, 1.402884E-03,
1.409888E-03, 1.416929E-03, 1.424005E-03, 1.431116E-03,
1.438264E-03, 1.445448E-03, 1.452668E-03, 1.527470E-03,
1.603093E-03, 1.681945E-03, 1.761202E-03, 1.845061E-03,
1.933716E-03, 2.027182E-03, 2.121523E-03, 2.219565E-03,
3.393765E-03, 6.983041E-03, 1.239907E-02, 1.941831E-02,
2.719453E-02, 4.259021E-02, 4.511358E-02, 3.129053E-02,
7.790424E-04, 7.829129E-04, 7.868076E-04, 7.907367E-04,
7.946831E-04, 7.986434E-04, 8.026087E-04, 8.065921E-04,
8.105949E-04, 8.146113E-04, 8.186372E-04, 8.602677E-04,
9.033871E-04, 9.480358E-04, 9.933467E-04, 1.041337E-03,
1.091437E-03, 1.143669E-03, 1.198479E-03, 1.254652E-03,
1.936170E-03, 4.124793E-03, 7.678764E-03, 1.270158E-02,
1.888639E-02, 3.475013E-02, 4.331860E-02, 3.541215E-02,
4.424564E-04, 4.446500E-04, 4.468439E-04, 4.490472E-04,
4.512638E-04, 4.534941E-04, 4.557355E-04, 4.579863E-04,
4.602451E-04, 4.625149E-04, 4.647960E-04, 4.882747E-04,
5.130009E-04, 5.383336E-04, 5.643281E-04, 5.918587E-04,
6.205220E-04, 6.501664E-04, 6.816390E-04, 7.141666E-04,
1.110405E-03, 2.429720E-03, 4.699432E-03, 8.137195E-03,
1.273246E-02, 2.696245E-02, 3.882157E-02, 3.674847E-02};


*/
