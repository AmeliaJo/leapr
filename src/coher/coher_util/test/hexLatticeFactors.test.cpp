#include "catch.hpp"
#include "coher/coher_util/hexLatticeFactors.h"
#include "generalTools/testing.h"

TEST_CASE( "tausq" ){
  GIVEN( "inputs" ){
    std::vector<std::tuple<int,int,int,double,double>> inputs
      { {0,0,0,2,4}, {1,0,0,2,4}, {0,1,0,2,4}, {0,0,1,2,4}, {1,1,0,2,4}, 
	{1,0,1,2,4}, {0,1,1,2,4}, {1,1,1,2,4}, {1,2,3,4,5}, {5,3,6,4,5},
        {8,7,9,.1,.2} };
    std::vector<double> correct { 0, 78.956835, 78.956835, 157.91367041, 
	236.870505, 236.870505, 236.870505, 394.78417604, 2881.924485, 
	14843.885019, 1306.735642 };
    
    for ( size_t i = 0; i < inputs.size(); ++i ){
      auto output = tausq(std::get<0>(inputs[i]),std::get<1>(inputs[i]),
                          std::get<2>(inputs[i]),std::get<3>(inputs[i]),
                          std::get<4>(inputs[i]));
      REQUIRE( correct[i] == Approx(output).epsilon(1e-6) );
    }
  } // GIVEN
} // TEST CASE



TEST_CASE( "Function to Compute Hex Lattice Factors" ){
  std::vector<double> b (60000, 0.0);

  GIVEN( "input material is graphite" ){
    int lat = 1;
    double a = 2.4573e-8, c = 6.7e-8;
    WHEN( "max energy of 5eV is used" ){
      double maxTauSq = 9.65192813E19; // this corresponds with Emax = 5eV
      int imax = hexLatticeFactors( lat, a, c, maxTauSq, b );
      /*
      REQUIRE( imax == 41 );
      std::vector<double> bVals {9.8696047E16, 0.0000000E00, 9.8696047E16, 
        0.0000000E00, 3.9478419E17, 6.3661976E-9, 3.9478419E17, 6.3661976E-9, 
        8.8826442E17, 0.0000000E00, 8.8826442E17, 0.0000000E00, 1.5791367E18, 
        7.9287194E-9, 2.4674012E18, 3.7746909E-9, 3.5530577E18, 5.2964318E-9, 
        4.8361063E18, 2.7118180E-9, 6.3165470E18, 3.9751694E-9, 7.9943798E18, 
        2.1142498E-9, 9.8696047E18, 3.1811975E-9, 1.1942222E19, 1.7319469E-9, 
        1.4212231E19, 2.6514805E-9, 1.6679632E19, 1.4665215E-9, 1.9344425E19, 
        2.2729476E-9, 2.2206611E19, 1.2715453E-9, 2.5266188E19, 1.9889713E-9, 
        2.8523157E19, 1.1222822E-9, 3.1977519E19, 1.7680612E-9, 3.5629273E19, 
        1.0043548E-9, 3.9478419E19, 1.5913109E-9, 4.3524957E19, 9.088387E-10, 
        4.7768887E19, 1.4466839E-9, 5.2210209E19, 8.299030E-10, 5.6848923E19, 
        1.3261531E-9, 6.1685029E19, 7.635772E-10, 6.6718528E19, 1.2241602E-9, 
        7.1949418E19, 7.070643E-10, 7.7377701E19, 1.1367341E-9, 8.3003375E19, 
        6.583373E-10, 8.8826442E19, 1.0609622E-9, 9.4846901E19, 6.158914E-10, 
        5.9217627E16, 2.0546815E-9, 5.9217627E16, 2.0546815E-9, 1.5791367E17, 
        7.5493817E-9, 1.5791367E17, 7.5493817E-9, 4.5400181E17, 1.4841275E-9, 
        4.5400181E17, 1.4841275E-9, 9.4748205E17, 3.0820222E-9, 9.4748205E17, 
        3.0820222E-9, 0.0000000E00, 0.0000000E00, 0.0000000E00, 0.0000000E00, 
        0.0000000E00, 0.0000000E00, 0.0000000E00, 0.0000000E00, 0.0000000E00, 
        0.0000000E00, 0.0000000E00, 0.0000000E00, 0.0000000E00, 0.0000000E00, 
        0.0000000E00, 0.0000000E00};
      checkVec(b,bVals,bVals.size());
      */
    } // WHEN

/*
    WHEN( "many iterations are used" ){
      i1m = 200;
      int imax = hexLatticeFactors( a, c1, c2, lat, tsqx, b, 
                                    i, wint, t2, maxTauSq, c, i1m );
      REQUIRE( imax == 51 );
      std::vector<double> bVals { 9.869604E16, 0.0000000E0, 9.869604E16, 
        0.0000000E0, 3.947841E17, 6.366197E-9, 3.947841E17, 6.366197E-9, 
        8.882644E17, 0.0000000E0, 8.882644E17, 0.0000000E0, 1.579136E18, 
        8.709980E-9, 2.467401E18, 5.662036E-9, 3.553057E18, 1.410627E-8, 
        4.836106E18, 4.067726E-9, 6.316547E18, 1.064972E-8, 7.994379E18, 
        3.171374E-9, 9.869604E18, 8.546287E-9, 1.194222E19, 2.597920E-9, 
        1.421223E19, 7.134039E-9, 1.667963E19, 2.199782E-9, 1.934442E19, 
        6.121201E-9, 2.220661E19, 1.907317E-9, 2.526618E19, 5.359649E-9, 
        2.852315E19, 1.683423E-9, 3.197751E19, 4.766330E-9, 3.562927E19, 
        1.506532E-9, 3.947841E19, 4.291115E-9, 4.352495E19, 1.363258E-9, 
        4.776888E19, 3.901968E-9, 5.221020E19, 1.244854E-9, 5.684892E19, 
        3.577471E-9, 6.168502E19, 1.145365E-9, 6.671852E19, 3.302760E-9, 
        7.194941E19, 1.060596E-9, 7.737770E19, 3.067201E-9, 8.300337E19, 
        9.87506E-10, 8.882644E19, 2.862987E-9, 9.484690E19, 9.23837E-10, 
        5.921762E16, 2.054681E-9, 5.921762E16, 2.054681E-9, 1.579136E17, 
        7.549381E-9, 1.579136E17, 7.549381E-9, 4.540018E17, 1.484127E-9, 
        4.540018E17, 1.484127E-9, 9.474820E17, 3.082022E-9, 9.474820E17, 
        3.082022E-9, 1.776528E17, 1.898033E-8, 5.921762E16, 2.054681E-9, 
        2.763489E17, 0.0000000E0, 1.579136E17, 7.549381E-9, 5.724370E17, 
        2.114735E-8, 4.540018E17, 1.484127E-9, 1.065917E18, 0.0000000E0, 
        9.474820E17, 3.082022E-9 };
      checkVec(b,bVals,bVals.size());
    } // WHEN

    WHEN( "realistic graphite values used" ){
      a = 2.4573E-8; c1 = 2.2081184e15; c2 = 2.2276676e14;
      tsqx = 9.65192813E17; i = 0; wint = 0.; 
      t2 = 2.64373487E-5; maxTauSq = 9.65192813E19; c = 6.7E-8; 
      i1m = 39;
      int imax = hexLatticeFactors( a, c1, c2, lat, tsqx, b, 
                                    i, wint, t2, maxTauSq, c, i1m );
      REQUIRE( imax == 424 );
      std::vector<double> bVals { 8.7944793E15, 0.0000000E00, 8.7944793E15, 
        0.0000000E00, 3.5177917E16, 2.1326762E-8, 3.5177917E16, 2.1326762E-8, 
        7.9150314E16, 0.0000000E00, 7.9150314E16, 0.0000000E00, 1.4071167E17, 
        1.0663381E-8, 1.4071167E17, 1.0663381E-8, 2.1986198E17, 0.0000000E00, 
        2.1986198E17, 0.0000000E00, 3.1660126E17, 7.1089208E-9, 3.1660126E17, 
        7.1089208E-9, 4.3092949E17, 0.0000000E00, 4.3092949E17, 0.0000000E00, 
        5.6284668E17, 5.3316906E-9, 5.6284668E17, 5.3316906E-9, 7.1235282E17, 
        0.0000000E00, 7.1235282E17, 0.0000000E00, 8.7944793E17, 4.2653525E-9, 
        8.7944793E17, 4.2653525E-9, 1.0641320E18, 9.1903350E-8, 1.2664050E18, 
        2.8076572E-8, 1.4862670E18, 4.6169031E-8, 1.7237179E18, 2.4232919E-8, 
        1.9787578E18, 8.0158639E-8, 2.2513867E18, 7.4276227E-8, 2.5416045E18, 
        5.1898721E-8, 2.8494113E18, 8.2243075E-8, 3.1748070E18, 1.2281144E-7, 
        3.5177917E18, 2.0386256E-7, 3.8783654E18, 1.4932899E-7, 4.2565280E18, 
        1.9922630E-7, 4.6522796E18, 2.0969009E-7, 5.0656201E18, 2.2981670E-7, 
        5.4965496E18, 2.5525675E-7, 5.9450680E18, 2.4374719E-7, 6.4111754E18, 
        2.5084819E-7, 6.8948718E18, 3.7668801E-7, 7.3961571E18, 3.0810910E-7, 
        7.9150314E18, 3.4590029E-7, 8.4514946E18, 3.4044973E-7, 9.0055468E18, 
        4.0952396E-7, 9.5771880E18, 4.9053148E-7, 1.0166418E19, 4.6868245E-7, 
        1.0773237E19, 4.8247783E-7, 1.1397645E19, 5.0559495E-7, 1.2039642E19, 
        5.1299354E-7, 1.2699228E19, 6.1367178E-7, 1.3376403E19, 6.2378776E-7, 
        1.4071167E19, 5.8887530E-7 };
      checkVec(b,bVals,bVals.size());
    } // WHEN



  } // GIVEN





  GIVEN( "input material is BeO") {
    int lat = 3;
    WHEN( "single iteration" ){
      i1m = 1;
      AND_WHEN( "input constants are large" ){
        THEN( "outputs" ){
          int imax = hexLatticeFactors( a, c1, c2, lat, tsqx, b, 
                                        i, wint, t2, maxTauSq, c, i1m );
          REQUIRE( imax == 41 );
          std::vector<double> bVals { 98696046700994448., 0, 98696046700994448.,
            0, 3.9478418680E17, 3.749690408E-8, 3.947841868E17, 3.749690408E-8, 
            8.882644203E17, 0, 8.882644203E17, 0, 1.579136747E18, 2.964826895E-9, 
            2.467401167E18, 1.493069735E-7, 3.553057681E18, 4.97901242E-8,
            4.836106288E18, 2.051556624E-8, 6.31654698E18, 7.332669318E-8, 
            7.994379782E18, 1.59948166E-8, 9.869604670E18, 2.995272845E-8, 
            1.19422216E19, 6.850673779E-8, 1.421223072E19, 9.96335270E-10,
            1.667963189E19, 5.800790100E-8, 1.93444251E19, 2.141044182E-8, 
            2.220661050E19, 9.61955094E-9, 2.526618795E19, 3.672738109E-8, 
            2.85231574E19, 8.490339719E-9 };

          checkVec(b,bVals,bVals.size());

        } // THEN
      } // AND WHEN
  
      AND_WHEN( "input constants are small" ){
        a = 1e-15; c1 = 1.5e5; c2 = 2.5e5; tsqx = 9.6e7;
        THEN( "outputs" ){
          int imax = hexLatticeFactors( a, c1, c2, lat, tsqx, b, 
              i, wint, t2, maxTauSq, c, i1m );
          REQUIRE( imax == 50 );
          std::vector<double> bVals { 9869604.401089, 0, 9869604.401089, 0,
            39478417.60435,  3.7496903E-3, 39478417.604, 3.7496904E-3,
            88826439.609, 0, 88826439.609, 0, 157913670.41, 1.4960564E-4, 
            246740110.02, 0, 355305758.43, 2.4997936E-3, 483610615.65, 0, 
            631654681.66, 3.674887635E-3, 799437956.48, 0, 986960440.10, 
            1.499876183E-3, 1194222132.531, 0, 1421223033.756, 4.986854883E-5, 
            1667963143.784, 0, 1934442462.613, 1.071340131E-3, 2220660990.245, 
            0, 2526618726.678, 1.83744381799E-3, 2852315671.914, 0 };
  
          checkVec(b,bVals,bVals.size());
  
        } // THEN
      } // AND WHEN

      AND_WHEN( "the a input is really large" ){
        a = 1e-5; c1 = 1.5e5; c2 = 2.5e5; tsqx = 9.6e7;
        THEN( "many iterations are necessary" ){
          int imax = hexLatticeFactors( a, c1, c2, lat, tsqx, b, 
                                        i, wint, t2, maxTauSq, c, i1m );
          REQUIRE( imax == 672 );
          std::vector<double> bVals { 9869604.401089, 0, 9869604.401089, 0,
            39478417.60435,  3.7496903E-3, 39478417.604, 3.7496904E-3,
            88826439.609, 0, 88826439.609, 0, 157913670.41, 3.90862091E-3,
            246740110.0272, 2.69065335E-2, 355305758.4392, 5.36938034E-3, 
            483610615.6533, 6.16711773E-3, 631654681.6697, 1.67739345E-2, 
            799437956.4882, 2.62611134E-2, 986960440.1089, 1.05068644E-2, 
            1194222132.531, 4.32585375E-2, 1421223033.756, 2.23883343E-2, 
            1667963143.784, 2.07285134E-2, 1934442462.613, 3.49406438E-2, 
            2220660990.245, 2.38701912E-2, 2526618726.678, 3.75143966E-2,
            2852315671.914, 2.59832708E-2 };

          checkVec(b,bVals,bVals.size());

        } // THEN
      } // AND WHEN
    } // WHEN
 
    WHEN( "few iterations" ){
      i1m = 2;
      THEN( "outputs" ){
        int imax = hexLatticeFactors( a, c1, c2, lat, tsqx, b, 
                                      i, wint, t2, maxTauSq, c, i1m );
        REQUIRE( imax == 51 );
        std::vector<double> bVals {9.86960467e16,0.00000000000,9.86960467e16,
        0.00000000000, 3.94784186e17, 3.74969040e-8, 3.94784186e17, 3.74969040e-8,
        8.88264420e17, 0.00000000000, 8.88264420e17, 0.00000000000, 1.57913674e18,
        3.69921212e-9, 2.46740116e18, 2.23960460e-7, 3.55305768e18, 1.10977193e-7,
        4.83610628e18, 3.07733493e-8, 6.31654698e18, 1.64101094e-7, 7.99437978e18,
        2.39922250e-8, 9.86960467e18, 6.71608483e-8, 1.19422216e19, 1.02760106e-7,
        1.42122307e19, 2.23635539e-9, 1.66796318e19, 8.70118515e-8, 1.93444251e19,
        4.80880486e-8, 2.22066105e19, 1.44293264e-8, 2.52661879e19, 8.25242106e-8,
        2.85231574e19, 1.27355095e-8, 3.19775191e19, 3.74392465e-8, 3.56292728e19,
        5.95905128e-8, 3.94784186e19, 1.34477264e-9, 4.35249565e19, 5.39233421e-8,
        4.77688866e19, 3.06476680e-8, 5.22102087e19, 9.41762985e-9, 5.68489228e19,
        5.50755606e-8, 6.16850291e19, 8.66497343e-9, 6.67185275e19, 2.59402275e-8,
        7.19494180e19, 4.19516378e-8, 7.73777006e19, 9.6113812e-10, 8.30033752e19,
        3.90605604e-8, 8.88264420e19, 2.24856597e-8, 9.48469008e19, 6.98905371e-9,
        5.92176269e16, 9.48851903e-8, 5.92176269e16, 9.48851903e-8, 1.57913673e17,
        5.71129194e-8, 1.57913673e17, 5.71129194e-8, 4.54001813e17, 3.49660433e-8,
        4.54001813e17, 3.49660433e-8, 9.47482047e17, 1.21908633e-7, 9.47482047e17,
        1.21908633e-7, 1.77652880e17, 2.19127960e-7, 5.92176269e16, 9.48851903e-8,
        2.76348927e17, 0.00000000000, 1.57913673e17, 5.71129194e-8, 5.72437067e17,
        1.24557936e-7, 4.54001813e17, 3.49660433e-8, 1.06591730e18, 0.00000000000,
        9.47482047e17,1.21908633e-7};
       checkVec(b,bVals,bVals.size());

      } // THEN
    } // WHEn



    i1m = 100;
    WHEN( "few iterations" ){
      THEN( "outputs" ){
        int imax = hexLatticeFactors( a, c1, c2, lat, tsqx, b, 
            i, wint, t2, maxTauSq, c, i1m );
        REQUIRE( imax == 51 );
        std::vector<double> bVals {9.86960467e16,0.00000000000,9.86960467e16,
        0.00000000000, 3.94784186e17, 3.74969040e-8, 3.94784186e17, 3.74969040e-8,
        8.88264420e17, 0.00000000000, 8.88264420e17, 0.00000000000, 1.57913674e18,
        3.69921212e-9, 2.46740116e18, 2.23960460e-7, 3.55305768e18, 1.10977193e-7,
        4.83610628e18, 3.07733493e-8, 6.31654698e18, 1.64101094e-7, 7.99437978e18,
        2.39922250e-8, 9.86960467e18, 6.71608483e-8, 1.19422216e19, 1.02760106e-7,
        1.42122307e19, 2.23635539e-9, 1.66796318e19, 8.70118515e-8, 1.93444251e19,
        4.80880486e-8, 2.22066105e19, 1.44293264e-8, 2.52661879e19, 8.25242106e-8,
        2.85231574e19, 1.27355095e-8, 3.19775191e19, 3.74392465e-8, 3.56292728e19,
        5.95905128e-8, 3.94784186e19, 1.34477264e-9, 4.35249565e19, 5.39233421e-8,
        4.77688866e19, 3.06476680e-8, 5.22102087e19, 9.41762985e-9, 5.68489228e19,
        5.50755606e-8, 6.16850291e19, 8.66497343e-9, 6.67185275e19, 2.59402275e-8,
        7.19494180e19, 4.19516378e-8, 7.73777006e19, 9.6113812e-10, 8.30033752e19,
        3.90605604e-8, 8.88264420e19, 2.24856597e-8, 9.48469008e19, 6.98905371e-9,
        5.92176269e16, 9.48851903e-8, 5.92176269e16, 9.48851903e-8, 1.57913673e17,
        5.71129194e-8, 1.57913673e17, 5.71129194e-8, 4.54001813e17, 3.49660433e-8,
        4.54001813e17, 3.49660433e-8, 9.47482047e17, 1.21908633e-7, 9.47482047e17,
        1.21908633e-7, 1.77652880e17, 2.19127960e-7, 5.92176269e16, 9.48851903e-8,
        2.76348927e17, 0.00000000000, 1.57913673e17, 5.71129194e-8, 5.72437067e17,
        1.24557936e-7, 4.54001813e17, 3.49660433e-8, 1.06591730e18, 0.00000000000,
        9.47482047e17,1.21908633e-7};
        checkVec(b,bVals,bVals.size());

      } // THEN
    } // WHEN
*/
  } // GIVEN
} // TEST CASE

