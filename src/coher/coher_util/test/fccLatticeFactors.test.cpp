#include "catch.hpp"
#include "coher/coher_util/fccLatticeFactors.h"
#include <range/v3/all.hpp>
#include "generalTools/testing.h"

TEST_CASE( "taufcc" ){
  GIVEN( "inputs" ){
    std::vector<std::tuple<int,int,int,double>> inputs
      { {0,0,0,2}, {1,0,0,2}, {0,1,0,2}, {0,0,1,2}, {1,1,0,2},
        {1,0,1,2}, {0,1,1,2}, {1,1,1,2}, {1,2,3,4}, {5,3,6,4},
        {8,7,9,.1} };
    std::vector<double> output { 0, 78.956835, 78.956835, 78.956835,
	210.551561, 210.551561, 105.275780, 289.50839, 2105.51561, 
	13896.403, 936.9544  };
    
    for ( size_t i = 0; i < output.size(); ++i ){
      REQUIRE( taufcc( std::get<0>(inputs[i]), std::get<1>(inputs[i]),
                       std::get<2>(inputs[i]), std::get<3>(inputs[i])) ==
               Approx(output[i]).epsilon(1e-6) );
    }
  } // GIVEN
} // TEST CASE




TEST_CASE( "Function to Compute FCC Lattice Factors" ){
  GIVEN( "aluminum is the requested material" ){
    THEN( "outputs" ){
      int lat = 4;
      double t2 = 3.5e-5, c1 = 1.5e15, wint = 0, maxTauSq = 9.6e19, a = 2e-8;
      std::vector<double> b (60000, 0.0);

      int imax = fccLatticeFactors( lat, b, t2, c1, wint, maxTauSq, a );
      REQUIRE( imax ==  29789 );

      std::vector<double> b_0_39 { 4.885454E19, 2.289114E-9, 4.713723E19, 
        2.330440E-9, 4.553835E19, 2.370998E-9, 4.405791E19, 2.410504E-9, 
        4.269590E19, 2.448650E-9, 4.145233E19, 2.485109E-9, 4.032720E19, 
        2.519538E-9, 3.932050E19, 2.551587E-9, 3.843223E19, 2.580905E-9, 
        3.766241E19, 2.607149E-9, 3.701101E19, 2.629992E-9, 3.647805E19, 
        2.649135E-9, 3.606353E19, 2.664316E-9, 3.576744E19, 2.675321E-9, 
        3.558979E19, 2.681990E-9, 3.553057E19, 2.684224E-9, 3.558979E19, 
        2.681990E-9, 3.576744E19, 2.675321E-9, 3.606353E19, 2.664316E-9, 
        3.647805E19, 2.649135E-9 }; 

      for ( auto i = 0; i < 40; ++i ){ 
        REQUIRE( b_0_39[i] == Approx(b[i]).epsilon(1e-6) );
      }

      std::vector<double> b_1000_1039 { 2.690454E19, 3.084659E-9, 2.502931E19, 
        3.198125E-9, 2.327252E19, 3.316639E-9, 2.163417E19, 3.439931E-9, 
        2.011425E19, 3.567533E-9, 1.871277E19, 3.698715E-9, 1.742972E19, 
        3.832434E-9, 1.626510E19, 3.967267E-9, 1.521893E19, 4.101360E-9, 
        1.429118E19, 4.232391E-9, 1.348187E19, 4.357573E-9, 1.279100E19, 
        4.473707E-9, 1.221857E19, 4.577304E-9, 1.176456E19, 4.664788E-9, 
        1.142900E19, 4.732774E-9, 1.121187E19, 4.778382E-9, 1.111317E19, 
        4.799554E-9, 1.113291E19, 4.795297E-9, 1.127108E19, 4.765813E-9, 
        1.152769E19, 4.712470E-9 };
    
      for ( auto i = 0; i < 40; ++i ){ 
        REQUIRE( b_1000_1039[i] == Approx(b[1000+i]).epsilon(1e-6) );
      }

      std::vector<double> b_51000_51039 { 1.018543E19, 5.013375E-9, 
        1.111317E19, 4.799554E-9, 1.215935E19, 4.588436E-9, 1.332396E19, 
        4.383320E-9, 1.460701E19, 4.186385E-9, 1.600849E19, 3.998938E-9, 
        1.752841E19, 3.821629E-9, 1.916677E19, 3.654647E-9, 2.092356E19, 
        3.497858E-9, 2.279878E19, 3.350920E-9, 2.479244E19, 3.213366E-9, 
        2.690454E19, 3.084659E-9, 1.626510E19, 3.967267E-9, 1.490310E19, 
        4.144590E-9, 1.365953E19, 4.329144E-9, 1.253439E19, 4.519269E-9, 
        1.152769E19, 4.712470E-9, 1.063943E19, 4.905245E-9, 9.869604E18, 
        5.092958E-9, 9.218210E18, 5.269830E-9 };

      for ( auto i = 0; i < 40; ++i ){ 
        REQUIRE( b_51000_51039[i] == Approx(b[51000+i]).epsilon(1e-6) );
      }

    } // THEN
  } // GIVEN

  GIVEN( "lead is the requested material" ){
    THEN( "outputs" ){
      int lat = 5;
      double t2 = 3.5e-5, c1 = 5.5e16, wint = 0, maxTauSq = 9.6e19, a = 2e-8;
      std::vector<double> b (60000, 0.0);

      int imax = fccLatticeFactors( lat, b, t2, c1, wint, maxTauSq, a );
      REQUIRE( imax ==  1637 );

      std::vector<double> b_0_39 { 9.553776E19, 1.636938E-9, 9.481399E19, 
        1.643174E-9, 9.481399E19, 1.643174E-9, 9.264268E19, 1.662319E-9, 
        9.481399E19, 1.643174E-9, 9.481399E19, 1.643174E-9, 9.553776E19, 
        1.636938E-9, 9.481399E19, 1.643174E-9, 9.553776E19, 1.636938E-9, 
        8.902382E19, 1.695769E-9, 8.395743E19, 1.746185E-9, 8.323366E19, 
        1.753761E-9, 8.685251E19, 1.716835E-9, 9.481399E19, 1.643174E-9, 
        9.481399E19, 1.643174E-9, 8.395743E19, 1.746185E-9, 7.744349E19, 
        1.818140E-9, 7.527218E19, 1.844177E-9, 7.744349E19, 1.818140E-9, 
        8.395743E19, 1.746185E-9 };

      for ( auto i = 0; i < 40; ++i ){ 
        REQUIRE( b_0_39[i] == Approx(b[i]).epsilon(1e-6) );
      }

    } // THEN
  } // GIVEN
} // TEST CASE

