#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include "endout/endout_util/coherentElasticOutput.h"
#include "generalTools/testing.h"
#include "coher/coher.h"
#include "endout/endout_util/test/correctCoherentOutput.h"

/*

TEST_CASE( "processing coherent elastic scattering data" ){
  GIVEN( "high tolerance and three temperatures" ){
    std::vector<double> bragg (10000,0.0);
    double maxEnergy = 5.0;
    int iel = 3, npr = 1;
    auto out = coher(iel,npr,bragg,maxEnergy);
    int numEdges = int(0.5*std::get<1>(out));

    double tol = 1e-2;
    std::vector<double> 
    temps { 100.0, 900.0, 2000.0 },
    dwpix { 1.3891141273070633, 5.6158501929886118, 12.242592321730232 },
    dwp1  { 1.5294981884837682, 4.9959938487181246, 10.689571188951792 };

    int numSecondaryScatterers = 1, secondaryScatterType = 0;

    auto output = processCoherentElastic(bragg,dwpix,dwp1,numSecondaryScatterers,secondaryScatterType,numEdges,tol,temps);
    auto energies = std::get<0>(output);
    auto totalSCR = std::get<1>(output);
    std::vector<std::vector<double>> correctSCR { 
    {0.0, 0.01864404, 0.03053734, 0.04661845, 0.05933238, 0.05933238, 0.1005425, 
     0.1005425, 0.1486804, 0.1574092, 0.1923674, 0.2006081, 0.2008283, 
     0.2085001, 0.2087926, 0.2087926, 0.2419633, 0.2543204, 0.2543204, 
     0.2661549, 0.2671144, 0.296011, 0.3074238, 0.3076443, 0.3285054, 
     0.3285054, 0.3799438, 0.3799438, 0.3995157, 0.4027672, 0.4258681, 
     0.4304213, 0.4307764, 0.4307764, 0.4476931, 0.4476931, 0.4556435, 
     0.4717409, 0.4877951, 0.4954783, 0.4961058, 0.5461104, 0.5461104, 
     0.5855024, 0.5888576, 0.5926588, 0.6025879, 0.6055862, 0.6249048, 
     0.6306709, 0.6306709, 0.6537167, 0.6874693, 0.7621183, 0.7976725, 
     0.8174247, 0.8556731, 0.8618886, 0.9107558, 0.9256253, 0.9997089, 
     0.9999859, 1.011994, 1.033715, 1.033715, 1.036807, 1.067964, 1.093864, 
     1.1218, 1.17643, 1.186621, 1.191693, 1.191894, 1.214293, 1.216558, 
     1.216558, 1.218816, 1.236427, 1.266505, 1.268519, 1.280743, 1.280822, 
     1.332283, 1.354, 1.38342, 1.391446, 1.405659, 1.445747, 1.448597, 
     1.451427, 1.460524, 1.465383, 1.489431, 1.490685, 1.503516, 1.541698, 
     1.54277, 1.558103, 1.574731, 1.584011, 1.585955, 1.625938, 1.62845, 
     1.630931, 1.662116, 1.662864, 1.67125, 1.677739, 1.712747, 1.716599, 
     1.719789, 1.721024, 1.721323, 1.725274, 1.736913, 1.76796, 1.77339, 
     1.773922, 1.791408, 1.797173, 1.817541, 1.8179, 1.820436, 1.836881, 
     1.850971, 1.868511, 1.870094, 1.870616, 1.877715, 1.878501, 1.882708, 
     1.90449, 1.90449, 1.905458, 1.91018, 1.918583, 1.93264, 1.933347, 
     1.933486, 1.933829, 1.936544, 1.936608, 1.944574, 1.956466, 1.958357, 
     1.958747, 1.960019, 1.963225, 1.97342, 1.973695, 1.974566, 1.981802, 
     1.989518, 1.989766, 1.992757, 1.998876, 1.999046, 1.999924, 2.002407, 
     2.006826, 2.00734, 2.009315, 2.012973, 2.012989, 2.013005, 2.013082, 
     2.013083, 2.01316, 2.013267, 2.013808, 2.014066, 2.01408, 2.01716, 
     2.017161, 2.017223, 2.017768, 2.018008, 2.020188, 2.020221, 2.020241, 
     2.020332, 2.020404, 2.02059, 2.022263, 2.022289, 2.022307, 2.022367, 
     2.022474, 2.026704},
    {0.0, 0.01759756, 0.02873892, 0.04367158, 0.05491318, 0.05491318, 0.08956622, 
     0.08956622, 0.1287927, 0.1357207, 0.1632581, 0.1696926, 0.1698622, 0.1755662, 
     0.1757789, 0.1757789, 0.1985081, 0.2067552, 0.2067552, 0.2145257, 0.2151470, 
     0.2332805, 0.2404159, 0.2405507, 0.2529543, 0.2529543, 0.2825927, 0.2825927, 
     0.2934940, 0.2953004, 0.3074904, 0.3098779, 0.3100604, 0.3100604, 0.3185183, 
     0.3185183, 0.3222702, 0.3298097, 0.3373094, 0.3408765, 0.3411638, 0.3636310, 
     0.3636310, 0.3803365, 0.3816680, 0.3831706, 0.3868616, 0.3879308, 0.3947252, 
     0.3966492, 0.3966492, 0.4042995, 0.4148894, 0.4377015, 0.4476261, 0.4528892, 
     0.4619137, 0.4632839, 0.4736185, 0.4765238, 0.4897325, 0.4897773, 0.4916798, 
     0.4950482, 0.4950482, 0.4954798, 0.4998003, 0.5030374, 0.5062828, 0.5122954, 
     0.5132987, 0.5137942, 0.5138135, 0.5159471, 0.5161360, 0.5161360, 0.5163234, 
     0.5177755, 0.5200495, 0.5201815, 0.5209814, 0.5209865, 0.5242455, 0.5254405, 
     0.5269193, 0.5272630, 0.5278637, 0.5294974, 0.5295963, 0.5296933, 0.5299963, 
     0.5301552, 0.5309331, 0.5309672, 0.5313072, 0.5322763, 0.5322987, 0.5326167, 
     0.5329517, 0.5331047, 0.5331361, 0.5337479, 0.5337790, 0.5338093, 0.5341880, 
     0.5341953, 0.5342759, 0.5343349, 0.5346474, 0.5346744, 0.5346963, 0.5347047, 
     0.5347067, 0.5347307, 0.5347925, 0.5349490, 0.5349693, 0.5349712, 0.5350331, 
     0.5350504, 0.5351065, 0.5351072, 0.5351124, 0.5351453, 0.5351684, 0.5351940, 
     0.5351956, 0.5351961, 0.5352033, 0.5352040, 0.5352077, 0.5352239, 0.5352239, 
     0.5352244, 0.5352268, 0.5352306, 0.5352358, 0.5352359, 0.5352360, 0.5352360, 
     0.5352367, 0.5352367, 0.5352385, 0.5352406, 0.5352408, 0.5352408, 0.5352410, 
     0.5352413, 0.5352421, 0.5352422, 0.5352422, 0.5352426, 0.5352428, 0.5352428, 
     0.5352429, 0.5352430, 0.5352430, 0.5352430, 0.5352430, 0.5352431, 0.5352431, 
     0.5352431, 0.5352431, 0.5352431, 0.5352431, 0.5352431, 0.5352431, 0.5352431, 
     0.5352431, 0.5352431, 0.5352431, 0.5352431, 0.5352431, 0.5352431, 0.5352431, 
     0.5352431, 0.5352431, 0.5352431, 0.5352431, 0.5352431, 0.5352431, 0.5352431, 
     0.5352431, 0.5352431, 0.5352431, 0.5352431, 0.5352431, 0.5352431, 0.5352431},
    {0.0, 0.01604264, 0.02607757, 0.03933944, 0.04856999, 0.04856999, 0.07482497, 
     0.07482497, 0.1030868, 0.1078720, 0.1266638, 0.1309935, 0.1311051, 0.1346536, 
     0.1347812, 0.1347812, 0.1471884, 0.1515043, 0.1515043, 0.1554657, 0.1557755, 
     0.1643737, 0.1677370, 0.1677982, 0.1731928, 0.1731928, 0.1854507, 0.1854507, 
     0.1897211, 0.1904258, 0.1948050, 0.1956541, 0.1957170, 0.1957170, 0.1985040, 
     0.1985040, 0.1996311, 0.2018688, 0.2040854, 0.2051294, 0.2052116, 0.2114505, 
     0.2114505, 0.2156795, 0.2159826, 0.2163225, 0.2170791, 0.2172842, 0.2185588, 
     0.2188906, 0.2188906, 0.2201989, 0.2218535, 0.2252705, 0.2265565, 0.2271895, 
     0.2280828, 0.2282045, 0.2290630, 0.2292756, 0.2301105, 0.2301129, 0.2302124, 
     0.2303827, 0.2303827, 0.2304011, 0.2305837, 0.2306995, 0.2308028, 0.2309783, 
     0.2310028, 0.2310148, 0.2310152, 0.2310646, 0.2310682, 0.2310682, 0.2310716, 
     0.2310983, 0.2311347, 0.2311364, 0.2311465, 0.2311466, 0.2311859, 0.2311974, 
     0.2312097, 0.2312119, 0.2312157, 0.2312254, 0.2312258, 0.2312263, 0.2312276, 
     0.2312282, 0.2312314, 0.2312315, 0.2312325, 0.2312352, 0.2312353, 0.2312359, 
     0.2312366, 0.2312368, 0.2312368, 0.2312376, 0.2312376, 0.2312376, 0.2312380, 
     0.2312380, 0.2312380, 0.2312381, 0.2312382, 0.2312382, 0.2312382, 0.2312382, 
     0.2312382, 0.2312382, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 
     0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 
     0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 
     0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 
     0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 
     0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 
     0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 
     0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 
     0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 
     0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 
     0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383, 0.2312383 }};

    for ( size_t t = 0; t < temps.size(); ++t ){
      REQUIRE( ranges::equal( totalSCR[t], correctSCR[t], equal ) );
    }
    std::vector<double> correctEnergies { 0.001061174, 0.003754368, 0.004244696, 
      0.004815542, 0.007999064, 0.009550566, 0.0112631, 0.01232428, 0.01330493, 
      0.01501747, 0.0155078, 0.01607865, 0.01697878, 0.01926217, 0.02073315, 
      0.02081367, 0.02456804, 0.02628058, 0.02652935, 0.02734175, 0.02824189, 
      0.03028372, 0.03052527, 0.03199626, 0.03378931, 0.03485049, 0.03583114, 
      0.03779246, 0.03803401, 0.03820227, 0.04154682, 0.04195663, 0.04325936, 
      0.04333988, 0.04505242, 0.04611359, 0.04880679, 0.04929711, 0.04946537, 
      0.04986796, 0.0507681, 0.05199753, 0.05460298, 0.0557519, 0.06006989, 
      0.06031866, 0.06431459, 0.067015, 0.06791514, 0.071333, 0.07158177, 
      0.07166951, 0.07533614, 0.07704868, 0.08293261, 0.0859551, 0.0938592, 
      0.09827216, 0.1009726, 0.1061174, 0.1120674, 0.1183467, 0.1197444, 
      0.1211349, 0.1278973, 0.127985, 0.1284021, 0.1351573, 0.1399067, 0.1434195, 
      0.1506651, 0.1511698, 0.152136, 0.1528091, 0.1614378, 0.1616866, 0.1617743, 
      0.1621914, 0.1678265, 0.1771139, 0.1772088, 0.1790896, 0.1793384, 0.188472, 
      0.1943559, 0.2047777, 0.205619, 0.2079901, 0.2184119, 0.2192532, 0.2211124, 
      0.2222613, 0.2230076, 0.2342707, 0.2359616, 0.2387642, 0.2515427, 0.2518792, 
      0.2537816, 0.2668089, 0.26806, 0.2716606, 0.285332, 0.2863271, 0.286678, 
      0.3013445, 0.3018493, 0.3054499, 0.3066793, 0.3224803, 0.3236292, 0.3243755, 
      0.3262347, 0.3317304, 0.3404686, 0.3438204, 0.3633025, 0.3655198, 0.3667492, 
      0.3776097, 0.3830838, 0.402376, 0.4024709, 0.4038903, 0.4168731, 0.4244696, 
      0.4470186, 0.4477649, 0.4482697, 0.4556246, 0.4582589, 0.4679778, 0.4914269, 
      0.492071, 0.4924808, 0.5017671, 0.5136082, 0.5393108, 0.5398888, 0.5402336, 
      0.542868, 0.5469589, 0.5473976, 0.5613611, 0.5894358, 0.59245, 0.5926265, 
      0.5951504, 0.6112363, 0.641997, 0.6440388, 0.6450256, 0.6632338, 0.6965183, 
      0.6970231, 0.7173537, 0.7533097, 0.7538878, 0.757093, 0.7735959, 0.8122896, 
      0.8177121, 0.8319605, 0.8735889, 0.8749638, 0.8755213, 0.876728, 0.8770129, 
      0.8772328, 0.8787482, 0.8890451, 0.8920303, 0.8924474, 0.9370828, 0.9373027, 
      0.9411675, 0.9525173, 0.9550566, 1.003863, 1.007517, 1.008607, 1.013875, 
      1.015127, 1.019788, 1.071442, 1.07224, 1.076411, 1.079858, 5.0};
    REQUIRE( ranges::equal(energies, correctEnergies, equal) );


  } // GIVEN

  GIVEN( "high tolerance and eight temperatures" ){
    std::vector<double> bragg (10000,0.0);
    double maxEnergy = 5.0;
    int iel = 3, npr = 1;
    auto out = coher(iel,npr,bragg,maxEnergy);
    int numEdges = int(0.5*std::get<1>(out));

    double tol = 0.9;
    std::vector<double> 
    temps { 296.0, 400.0, 500.0, 600.0, 700.0, 800.0, 1000.0, 1200.0 },
    dwpix { 2.18024395, 2.72608260, 3.28130480, 3.85303452, 4.43480683, 5.02310000, 6.21177434, 7.41006538},
    dwp1  { 2.16475875, 2.59570940, 3.04447306, 3.51490437, 3.99970405, 4.49435669, 5.50273307, 6.5268008};

    int numSecondaryScatterers = 1, secondaryScatterType = 0;

    auto output = processCoherentElastic(bragg,dwpix,dwp1,numSecondaryScatterers,secondaryScatterType,numEdges,tol,temps);
    auto energies = std::get<0>(output);
    auto totalSCR = std::get<1>(output);

    std::vector<std::vector<double>> correctSCR { 
    {0, 0.01844542, 0.03019557, 0.04605728, 0.05848436, 0.05848436, 0.09839143, 
        0.09839143, 0.1447364, 0.1530992, 1.351837},
    {0, 0.01831063, 0.02996375, 0.04567693, 0.05791133, 0.05791133, 0.09694990, 
        0.09694990, 0.1421058, 0.1502268, 9.754622},
    {0, 0.01817311, 0.02972733, 0.04528931, 0.05732877, 0.05732877, 0.09549435, 
        0.09549435, 0.1394598, 0.1473396, 9.457270},
    {0, 0.01803146, 0.02948390, 0.04489046, 0.05673086, 0.05673086, 0.09401090, 
        0.09401090, 0.1367739, 0.1444109, 9.158226},
    {0, 0.01788763, 0.02923684, 0.04448595, 0.05612603, 0.05612603, 0.09252107, 
        0.09252107, 0.1340874, 0.1414836, 8.861996},
    {0, 0.01774276, 0.02898811, 0.04407901, 0.05551915, 0.05551915, 0.09103709, 
        0.09103709, 0.1314227, 0.1385822, 8.571053},
    {0, 0.01745246, 0.02849001, 0.04326493, 0.05430996, 0.05430996, 0.08811286, 
        0.08811286, 0.1262051, 0.1329074, 8.009906},
    {0, 0.01716365, 0.02799491, 0.04245695, 0.05311619, 0.05311619, 0.08526853, 
        0.08526853, 0.1211735, 0.1274430, 7.479787}};

    for ( size_t t = 0; t < temps.size(); ++t ){
      REQUIRE( ranges::equal( totalSCR[t], correctSCR[t], equal ) );
    }
    std::vector<double> correctEnergies{ 0.001061174, 0.003754368, 0.004244696, 0.004815542, 0.007999064, 0.009550566, 0.0112631, 0.01232428, 0.01330493, 0.01501747, 5.0 };
    REQUIRE( ranges::equal(energies, correctEnergies, equal) );


  } // GIVEN



  GIVEN( "low (normal) tolerance and a single temperature" ){
    THEN( "the SCR vector is returned correctly" ){
      std::vector<double> bragg (10000,0.0);
      double maxEnergy = 5.0;
      int iel = 3, npr = 1;
      auto out = coher(iel,npr,bragg,maxEnergy);
      int numEdges = int(0.5*std::get<1>(out));

      double tol = 9e-8;
      std::vector<double> temps {296.0}, dwpix {2.18024395}, dwp1 {2.16475875};

      int numSecondaryScatterers = 1, secondaryScatterType = 0;
      std::vector<std::vector<double>> correctSCR { 
    { 0.0, 0.01844542, 0.03019557, 0.04605728, 0.05848436, 0.05848436, 
      0.09839143, 0.09839143, 0.1447364, 0.1530992, 0.1865445, 0.1944157, 
      0.1946256, 0.2018871, 0.2021628, 0.2021628, 0.2330883, 0.2445528, 
      0.2445528, 0.2554993, 0.2563846, 0.2828894, 0.2933505, 0.2935517, 
      0.3124959, 0.3124959, 0.3589361, 0.3589361, 0.3764955, 0.3794114, 
      0.3999303, 0.4039698, 0.4042837, 0.4042837, 0.4191601, 0.4191601, 
      0.4260771, 0.4400626, 0.4540039, 0.4606684, 0.4612112, 0.5043222, 
      0.5043222, 0.5379218, 0.5407486, 0.5439489, 0.5522136, 0.5546901, 
      0.5706061, 0.5753105, 0.5753105, 0.5940949, 0.62132, 0.681239, 
      0.7093026, 0.7247594, 0.7540229, 0.7587189, 0.7953557, 0.8063413, 
      0.8601529, 0.8603506, 0.8688838, 0.8842583, 0.8842583, 0.8864049, 
      0.9080055, 0.9256194, 0.9443617, 0.980648, 0.9872785, 0.9905737, 
      0.9907037, 1.005188, 1.006617, 1.006617, 1.008041, 1.019128, 1.037763, 
      1.038978, 1.046352, 1.046399, 1.077251, 1.089936, 1.106835, 1.111309, 
      1.119215, 1.141363, 1.142891, 1.144405, 1.149246, 1.151824, 1.164552, 
      1.165195, 1.17174, 1.191062, 1.191585, 1.199059, 1.20712, 1.211455, 
      1.21236, 1.230781, 1.231894, 1.23299, 1.246755, 1.247072, 1.250616, 
      1.253331, 1.267926, 1.269461, 1.270729, 1.271218, 1.271336, 1.27287, 
      1.277276, 1.288919, 1.290845, 1.291032, 1.297174, 1.299137, 1.305966, 
      1.30608, 1.306884, 1.31208, 1.31637, 1.321595, 1.322037, 1.322183, 
      1.324159, 1.324373, 1.325511, 1.331243, 1.331243, 1.331481, 1.33264, 
      1.334648, 1.337895, 1.338047, 1.338077, 1.338151, 1.338728, 1.338741, 
      1.340412, 1.34281, 1.343162, 1.343234, 1.343468, 1.344055, 1.345838, 
      1.345882, 1.346021, 1.34717, 1.348333, 1.348367, 1.348776, 1.349567, 
      1.349587, 1.349689, 1.349975, 1.350462, 1.350512, 1.350704, 1.351045, 
      1.351046, 1.351047, 1.351054, 1.351054, 1.35106, 1.351069, 1.351113, 
      1.351133, 1.351134, 1.351376, 1.351376, 1.35138, 1.351417, 1.351433, 
      1.351576, 1.351578, 1.351579, 1.351584, 1.351588, 1.351599, 1.35169, 
      1.351691, 1.351692, 1.351695, 1.3517, 1.351756, 1.351756, 1.351758, 
      1.351763, 1.351793, 1.351793, 1.351796, 1.351813, 1.351813, 1.351813, 
      1.351815, 1.351824, 1.351824, 1.351825, 1.351825, 1.351825, 1.351825, 
      1.351825, 1.351826, 1.351831, 1.351831, 1.351831, 1.351831, 1.351831, 
      1.351831, 1.351831, 1.351834, 1.351834, 1.351834, 1.351834, 1.351834, 
      1.351834, 1.351836, 1.351836, 1.351836, 1.351836, 1.351836, 1.351836, 
      1.351836, 1.351836, 1.351837, 1.351837, 1.351837, 1.351837, 1.351837, 
      1.351837, 1.351837, 1.351837 }};


      auto output = processCoherentElastic(bragg,dwpix,dwp1,numSecondaryScatterers,secondaryScatterType,numEdges,tol,temps);
      auto energies = std::get<0>(output);
      auto totalSCR = std::get<1>(output);


      REQUIRE( ranges::equal( totalSCR[0], correctSCR[0], equal ) );

      std::vector<double> correctEnergies { 0.001061174, 0.003754368, 
      0.004244696, 0.004815542, 0.007999064, 0.009550566, 0.0112631, 0.01232428, 
      0.01330493, 0.01501747, 0.0155078, 0.01607865, 0.01697878, 0.01926217, 
      0.02073315, 0.02081367, 0.02456804, 0.02628058, 0.02652935, 0.02734175, 
      0.02824189, 0.03028372, 0.03052527, 0.03199626, 0.03378931, 0.03485049, 
      0.03583114, 0.03779246, 0.03803401, 0.03820227, 0.04154682, 0.04195663, 
      0.04325936, 0.04333988, 0.04505242, 0.04611359, 0.04880679, 0.04929711, 
      0.04946537, 0.04986796, 0.0507681, 0.05199753, 0.05460298, 0.0557519, 
      0.06006989, 0.06031866, 0.06431459, 0.067015, 0.06791514, 0.071333, 
      0.07158177, 0.07166951, 0.07533614, 0.07704868, 0.08293261, 0.0859551, 
      0.0938592, 0.09827216, 0.1009726, 0.1061174, 0.1120674, 0.1183467, 
      0.1197444, 0.1211349, 0.1278973, 0.127985, 0.1284021, 0.1351573, 0.1399067, 
      0.1434195, 0.1506651, 0.1511698, 0.152136, 0.1528091, 0.1614378, 0.1616866, 
      0.1617743, 0.1621914, 0.1678265, 0.1771139, 0.1772088, 0.1790896, 0.1793384, 
      0.188472, 0.1943559, 0.2047777, 0.205619, 0.2079901, 0.2184119, 0.2192532, 
      0.2211124, 0.2222613, 0.2230076, 0.2342707, 0.2359616, 0.2387642, 0.2515427, 
      0.2518792, 0.2537816, 0.2668089, 0.26806, 0.2716606, 0.285332, 0.2863271, 
      0.286678, 0.3013445, 0.3018493, 0.3054499, 0.3066793, 0.3224803, 0.3236292, 
      0.3243755, 0.3262347, 0.3317304, 0.3404686, 0.3438204, 0.3633025, 0.3655198, 
      0.3667492, 0.3776097, 0.3830838, 0.402376, 0.4024709, 0.4038903, 0.4168731, 
      0.4244696, 0.4470186, 0.4477649, 0.4482697, 0.4556246, 0.4582589, 0.4679778, 
      0.4914269, 0.492071, 0.4924808, 0.5017671, 0.5136082, 0.5393108, 0.5398888, 
      0.5402336, 0.542868, 0.5469589, 0.5473976, 0.5613611, 0.5894358, 0.59245, 
      0.5926265, 0.5951504, 0.6112363, 0.641997, 0.6440388, 0.6450256, 0.6632338, 
      0.6965183, 0.6970231, 0.7173537, 0.7533097, 0.7538878, 0.757093, 0.7735959, 
      0.8122896, 0.8177121, 0.8319605, 0.8735889, 0.8749638, 0.8755213, 0.876728, 
      0.8770129, 0.8772328, 0.8787482, 0.8890451, 0.8920303, 0.8924474, 0.9370828, 
      0.9373027, 0.9411675, 0.9525173, 0.9550566, 1.003863, 1.007517, 1.008607, 
      1.013875, 1.015127, 1.019788, 1.071442, 1.07224, 1.076411, 1.079858, 
      1.086642, 1.141328, 1.143567, 1.146712, 1.155619, 1.213414, 1.215688, 
      1.226717, 1.288085, 1.288809, 1.290776, 1.299938, 1.365075, 1.365629, 
      1.36659, 1.367936, 1.368763, 1.369224, 1.372589, 1.375282, 1.444142, 
      1.444339, 1.446359, 1.446615, 1.447393, 1.449412, 1.452747, 1.525773, 
      1.525903, 1.526512, 1.526936, 1.530821, 1.532335, 1.609042, 1.609224, 
      1.609897, 1.614046, 1.695459, 1.695656, 1.696248, 1.697878, 1.783325, 
      1.783463, 1.783834, 1.873237, 1.873983, 1.875665, 5.0 };

      REQUIRE( ranges::equal(energies, correctEnergies, equal) );

    } // THEN
  } // GIVEN
} // TEST CASE

*/



TEST_CASE( "finalizing coherent elastic scattering data for ENDF" ){
  GIVEN( "default tolerance and three temperatures" ){
    std::vector<double> bragg (10000,0.0);
    double maxEnergy = 5.0;
    int iel = 3, npr = 1;
    auto out = coher(iel,npr,bragg,maxEnergy);
    int numEdges = int(0.5*std::get<1>(out));

    double tol = 9e-8;
    std::vector<double> 
      temps { 296.0, 400.0, 1200.0 },
      dwpix { 2.1802439, 2.72608260, 7.41006538 },
      dwp1  { 2.1647587, 2.59570940, 6.52680080 };

    int numSecondaryScatterers = 1, secondaryScatterType = 0;

    double za = 127.0, awr = 8.93478;

    auto outputChunk = writeCohElasticToENDF( bragg, dwpix, dwp1, numSecondaryScatterers, 
      secondaryScatterType, numEdges, tol, temps );//, za, awr );

      auto begin = correct_1.begin();
      auto end = correct_1.end();
      long lineNumber = 1;
      using namespace njoy::ENDFtk;
      using CoherentElastic = section::Type<7,2>::CoherentElastic;

      CoherentElastic correctChunk( begin, end, lineNumber, 27, 7, 2 );
      REQUIRE( outputChunk.elasticScatteringType() == 
              correctChunk.elasticScatteringType() );
      REQUIRE( outputChunk.temperatureDependenceFlag() == 
              correctChunk.temperatureDependenceFlag() );
      REQUIRE( outputChunk.NT() == correctChunk.NT() );
      REQUIRE( outputChunk.NP() == correctChunk.NP() );
      REQUIRE( outputChunk.NR() == correctChunk.NR() );

      REQUIRE( outputChunk.temperatureDependenceFlag() == correctChunk.temperatureDependenceFlag() );
      REQUIRE( outputChunk.NC() == correctChunk.NC() );
      REQUIRE( ranges::equal(outputChunk.LI(), correctChunk.LI(), equal) );

      REQUIRE( outputChunk.numberBraggEdges() == correctChunk.numberBraggEdges() );
      REQUIRE( outputChunk.numberBraggEdges() == outputChunk.energies().size() );

      REQUIRE( ranges::equal(correctChunk.boundaries(),outputChunk.boundaries(), equal) );
      REQUIRE( ranges::equal(correctChunk.interpolants(),outputChunk.interpolants(), equal) );

      REQUIRE( ranges::equal(temps,correctChunk.temperatures(),equal) );
      REQUIRE( ranges::equal(temps, outputChunk.temperatures(),equal) );

      auto correctEnergies = correctChunk.energies();
      auto outputEnergies  =  outputChunk.energies();
      REQUIRE( ranges::equal(correctEnergies,outputEnergies,equal) );

      for ( size_t itemp = 0; itemp < temps.size(); ++itemp ){
        auto correctXSVals = correctChunk.thermalScatteringValues()[itemp];
        auto outputXSVals  =  outputChunk.thermalScatteringValues()[itemp];
        REQUIRE( ranges::equal(correctXSVals,outputXSVals,equal) );
      }


  } // GIVEN
} // TEST CASE




    //bragg = { 1.061174049E-3, 0.000000000000, 3.754368168E-3, 0.019057138526, 4.244696198E-3, 0.012191661846, 4.815542218E-3, 0.016539554963, 7.999064366E-3, 0.013321645663, 9.550566445E-3, 0.000000000000, 0.011263104505, 0.044010576233, 0.012324278554, 0.000000000000, 0.013304934614, 0.052025441335, 0.015017472673, 9.528569263E-3, 0.015507800703, 0.038270343418, 0.016078646723, 9.051523232E-3, 0.016978784792, 2.432122694E-4,  0.019262168872, 8.584695209E-3, 0.020733152961, 3.301394057E-4,  0.020813670951, 0.000000000000, 0.024568039119, 0.038285726967, 0.026280577179, 0.014405842640, 0.026529351238, 0.000000000000, 0.027341751228, 0.013882358288, 0.028241889297, 1.131470301E-3, 0.030283719406, 0.034483992229, 0.030525273377, 0.013638847964, 0.031996257466, 2.657543914E-4,  0.033789313516, 0.025409518035, 0.034850487565, 0.000000000000, 0.035831143625, 0.063404751696, 0.037792455743, 0.000000000000, 0.038034009714, 0.024437198040, 0.038202265783, 4.063887282E-3, 0.041546823912, 0.029441045651, 0.041956633951, 5.816706546E-3, 0.043259361971, 4.571092206E-4,  0.043339879962, 0.000000000000, 0.045052418021, 0.022005288116, 0.046113592071, 0.000000000000, 0.048806786190, 0.010570998480, 0.049297114219, 0.021464793581, 0.049465370288, 0.021428256321, 0.049867960239, 0.010279348978, 0.050768098308, 8.439069908E-4,  0.051997528427, 0.067737236954, 0.054602984467, 0.000000000000, 0.055751896595, 0.054543502926, 0.060069890695, 4.764284631E-3, 0.060318664754, 5.405567717E-3, 0.064314586893, 0.014452724773, 0.067015001101, 4.433639753E-3, 0.067915139170, 0.028717536833, 0.071332995200, 8.744014841E-3, 0.071581769259, 0.000000000000, 0.071669507338, 0.035017141617, 0.075336137428, 0.052394914360, 0.077048675488, 0.117043727905,  0.082932611844, 0.057694142961, 0.085955098012, 0.032622588487, 0.093859204211, 0.066153524605, 0.098272156478, 0.011030664034, 0.100972570686,  0.088103083476, 0.106117404953,  0.027625518165, 0.112067419122,  0.142502104515,  0.118346725341,  5.527285652E-4,  0.119744411528,  0.024156234113, 0.121134877627,  0.044052085810, 0.127897291786,  0.000000000000, 0.127985029865,  6.527945635E-3, 0.128402059993,  0.065926241008, 0.135157254064,  0.057008711565, 0.139906718469,  0.063217081634, 0.143419532667,  0.126185766232,  0.150665054768,  0.024556201799, 0.151169822975,  0.012257584975, 0.152136038857,  4.874992817E-4,  0.152809063133,  0.054652104830, 0.161437831243,  5.812372759E-3, 0.161686605303,  0.000000000000, 0.161774343381,  5.806324358E-3, 0.162191373510,  0.045388927285, 0.167826535807,  0.080113850116, 0.177113888016,  5.662147268E-3, 0.177208846183,  0.034392661317, 0.179089640312,  2.246595086E-4,  0.179338414371,  0.146590914569,  0.188471950689,  0.065252716326, 0.194355887045,  0.091484840092, 0.204777711205,  0.026522276522, 0.205618991550,  0.047200953985, 0.207990113709,  0.134984955643,  0.218411937869,  0.010197630667, 0.219253218214,  0.010178047575, 0.221112352077,  0.033070045393, 0.222261264205,  0.017780606966, 0.223007586382,  0.088394093042, 0.234270690888,  4.923211463E-3, 0.235961568682,  0.050868534535, 0.238764161145,  0.153865621868,  0.251542667287,  4.656400049E-3, 0.251879179425,  0.066703750272, 0.253781633819,  0.073144816839, 0.266808914020,  0.044047827073, 0.268060004404,  9.295469470E-3, 0.271660556681,  0.195234533501,  0.285331980803,  0.013286351710, 0.286327077039,  0.013195868903, 0.286678029355,  0.166228245198,  0.301344549713,  4.340860194E-3, 0.301849317920,  0.048838467604, 0.305449870197,  0.038593738297, 0.306679300315,  0.209711998316,  0.322480292625,  0.025303197351, 0.323629204754,  0.021097368470, 0.324375526931,  8.203895854E-3, 0.326234660794,  2.009469258E-3, 0.331730447376,  0.027395982668, 0.340468613832,  0.084920121796, 0.343820392049,  0.231010109350,  0.363302454626,  0.045272703563, 0.365519760892,  4.491277801E-3, 0.366749191011,  0.148735578758,  0.377609705565,  0.052245724698, 0.383083831882,  0.190594308983,  0.402375978124,  3.756569659E-3, 0.402470936291,  0.026575707314, 0.403890282745,  0.173744683157,  0.416873145398,  0.160595387378,  0.424469619814,  0.208975052203,  0.447018586106,  0.021513453826, 0.447764908283,  7.122171672E-3, 0.448269676490,  0.097184524479, 0.455624596936,  0.011223758631, 0.458258933330,  0.061049682782, 0.467977755845,  0.334557013925,  0.491426860206,  0.000000000000, 0.492071004127,  0.017109536861, 0.492480814167,  0.083680472272, 0.501767069361,  0.157186854307,  0.513608239975,  0.281795742890,  0.539310751046,  0.016472468580, 0.539888817154,  3.243062387E-3, 0.540233646396,  8.043204962E-3, 0.542867982791,  0.064558675439, 0.546958863097,  1.551919124E-3, 0.547397553491,  0.194513719628,  0.561361072204,  0.315024016318,  0.589435802448,  0.059015398838, 0.592449971513,  0.012383448978, 0.592626544686,  0.040428031243, 0.595150385720,  0.103457997117,  0.611236252532,  0.361336938441,  0.641996956807,  0.011658686454, 0.644038786916,  0.037378577896, 0.645025566049,  0.312394704895,  0.663233780960,  0.370462254348,  0.696518326269,  0.014489901413, 0.697023094476,  0.174858944867,  0.717353657486,  0.402958028529,  0.753309736648,  0.013828190397, 0.753887802757,  0.071552245470, 0.757092985171,  0.206175939380,  0.773595882111,  0.404070608761,  0.812289572940,  0.058852107778, 0.817712061621,  0.233647703361,  0.831960454836,  0.470258842549,  0.873588893754,  2.659402095E-3, 0.874963822660,  2.546816516E-3, 0.875521325518,  0.012826813392, 0.876727998355,  1.015377012E-4,  0.877012872857,  0.013017548507, 0.877232766562,  0.017897970033, 0.878748168198,  0.091396180495, 0.889045056821,  0.046226580151, 0.892030345531,  2.480481513E-3, 0.892447375659,  0.563741501225,  0.937082763553,  9.821347146E-5, 0.937302657258,  0.014758471338, 0.941167520786,  0.132558989015,  0.952517266355,  0.062259233990, 0.955056644582,  0.575039178598,  1.003863430772, 0.011573585566, 1.007516717700, 6.979932780E-3, 1.008606772104, 0.032907564425, 1.013875444893, 0.026974064694, 1.015126535278, 0.069599717664, 1.019788261604, 0.643580380993,  1.071442057805, 0.013893798911, 1.072240017618, 8.982238203E-3, 1.076411415914, 0.032268799106, 1.079858152299, 0.058356594369, 1.086642226725, 0.709331000018,  1.141327923213, 4.511515639E-3, 1.143566889745, 0.031356190473, 1.146712117420, 0.109081920369,  1.155618539944, 0.688728034760,  1.213414460679, 0.020667029092, 1.215688430640, 0.114380325997,  1.226717201263, 0.705882378982,  1.288084793921, 0.012512742037, 1.288809455832, 0.016550208206, 1.290775794009, 0.158780697986, 1.299938210681, 0.739377969252, 1.365074611684, 0.000000000000, 1.365628823497, 0.028295230255, 1.366590013320, 0.020147848539, 1.367936061872, 0.020128767894, 1.368762902040, 0.022180008292, 1.369224349715, 0.057740574046, 1.372589471095, 0.026604174387, 1.375281568198, 0.805287025885, 1.444142360000, 1.910167313E-3, 1.444339496424, 0.023852692127, 1.446358569252, 0.000000000000, 1.446614563399, 3.962205866E-3, 1.447393056977, 0.016078263431, 1.449412129805, 0.024075836628, 1.452747273815, 0.856523925295,  1.525773340839, 7.716537114E-3, 1.525903302435, 0.015124554687, 1.526512442928, 5.573545347E-3, 1.526935596130, 0.058328786146, 1.530821022909, 0.010555648511, 1.532335327530, 0.891744329288,  1.609042464822, 1.878554141E-3, 1.609224064053, 0.013223452235, 1.609897088329, 0.040974485427, 1.614045729344, 0.963189236790, 1.695459010509, 1.762920651E-3, 1.695656146933, 0.000000000000, 1.696247556203, 1.793128272E-3, 1.697878479258, 1.076412555681, 1.783324880020, 1.748802968E-3, 1.783463158719, 0.012484386241, 1.783833577270, 0.999319345979, 1.873236508683, 0.026067990974, 1.873982830860, 0.033005031898, 1.875665391550, 0.966671071641, 1.962110817592, 1.176441469177, 2.060407925382, 1.660087056E-3, 2.060421268544, 0.028143624213, 2.062330943027, 2.648139437E-4,  2.063108339590, 0.081773962651, 2.068324277728, 4.050374301E-3, 2.069450432576, 0.945462310338,  2.148877450310, 1.246519554277, 2.256375269246, 9.544463383E-3, 2.256707393324, 6.286460237E-3, 2.257721317798, 0.032236628366, 2.260461761492, 0.989120166260,  2.344133475425, 1.415202243219, 2.461346825830, 2.982024511E-3, 2.461441783998, 0.055015406631, 2.469195365351, 0.104115378823,  2.478734323647, 0.807529740066,  2.547878892936, 1.518366455287, 2.675464623896, 0.084545337463, 2.683036147001, 0.046680162368, 2.686724437356, 0.863798073792,  2.760113702843, 1.664943516356, 2.898372226054, 1.371762847E-3, 2.898925340851, 9.848081146E-3, 2.899165797806, 1.116743687E-4,  2.899223558515, 0.039263204807, 2.903203943462, 0.829498212811,  2.980837905147, 1.849293301080, 3.130023020725, 1.074771809E-4,  3.130181862675, 0.017615007772, 3.131994384960, 0.058023770448, 3.135550519690, 0.187750099423,  3.154453419143, 0.669451245091,  3.210051499847, 1.897611778663, 3.371090032185, 0.013073382963, 3.371489331091, 0.027401830281, 3.373658290767, 0.136483314923,  3.387911710041, 0.669589232175,  3.447754486943, 2.018569562379, 3.620272088448, 0.023595444653, 3.623718824833, 0.043945132322, 3.624595108606, 0.057944628031, 3.629859393335, 0.809437383045,  3.693946866435, 2.150195585009, 3.878815432820, 0.021106706511, 3.880296469025, 0.803469219269,  3.948628638324, 2.364601146150, 4.146201315933, 0.011835142771, 4.147705568437, 0.011786318609, 4.148225414819, 0.326493679644,  4.173012250628, 0.409702287223,  4.211799802609, 2.490940270884, 4.422841741858, 0.000000000000, 4.422894476509, 5.706881464E-3, 4.423154399700, 0.019086309044, 4.425410638438, 0.021299480685, 4.426004700756, 5.455574384E-4,  4.426466786429, 0.044287396293, 4.429803027454, 0.101479511550,  4.440428111112, 0.510531070673,  4.483460359290, 2.580070534405, 4.707784475873, 0.000000000000, 4.708044399064, 8.763193677E-5, 4.708247020563, 0.028415402265, 4.710216649786, 4.380657635E-5, 4.710394957971, 0.039168515569, 4.711798767232, 0.032149871133, 4.713641266887, 0.032765346065, 4.716333363991, 0.538783732612,  4.763610308368, 2.801887250391, 5.000000000000, 2.801887250391};
