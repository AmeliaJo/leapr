#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include "endout/endout.h"
#include "generalTools/testing.h"
#include "coher/coher.h"


TEST_CASE( "finalize the debye-waller coefficient output" ){
  GIVEN( "No secondary scatterers considered" ){
  } // GIVEN
  GIVEN( "Secondary scatterers considered" ){
    WHEN( "SCT approximation (BeO test 23)" ){
        std::cout.precision(15);

        int numSecondaryScatterers = 1, secondaryScatterType = 0;
        double awr = 8.9347799999999999, aws = 15.858000000000001;
        std::vector<double> 

        temps { 296.0, 400.0, 500.0, 600.0, 700.0, 800.0, 1000.0, 1200.0 },
        correctDWPIX {2.18024395, 2.72608260, 3.28130480, 3.85303452, 4.43480683, 
              5.02310000, 6.21177434, 7.41006538},
        correctDWP1 {2.16475875, 2.59570940, 3.04447306, 3.51490437, 3.99970405, 
              4.49435669, 5.50273307, 6.5268008},
        dwpix { 0.88189718, 1.49011626, 2.24201096, 3.15918678, 4.24222697, 
                5.49139855, 8.48861475, 12.1513474 },
        dwp1  { 0.49335305, 0.79941568, 1.17203004, 1.62375823, 2.15567111, 
                2.76830621, 4.23677157, 6.03029012 };

        scaleDebyeWallerCoefficients(numSecondaryScatterers, secondaryScatterType, 
                                     dwpix, dwp1, temps, awr, aws );
        REQUIRE( ranges::equal(dwpix,correctDWPIX,equal) );
        REQUIRE( ranges::equal(dwp1,correctDWP1,equal) );


    } // WHEN
    WHEN( "Secondary scatterers use free gas approximation" ){
      THEN( "DWP1 is not changed and DWPIX is scaled by awr" ){
        int numSecondaryScatterers = 1, secondaryScatterType = 1;
        std::vector<double> 
        dwp1 (5,0.0),
        dwpix { 0.27366867, 0.27913484, 0.43494593, 0.86192089, 1.44790731 },
        temps { 296.0, 300.0, 400.0, 600.0, 800.0 },
        correctDWPIX{10.73794694, 10.80639075, 12.62883113, 16.68414797, 21.02028737 },
        correctDWP1 (5,0.0);
        
        double awr = 0.99917, aws = 15.85316; 
        scaleDebyeWallerCoefficients(numSecondaryScatterers, secondaryScatterType, 
                                     dwpix, dwp1, temps, awr, aws );
        REQUIRE( ranges::equal(dwpix,correctDWPIX,equal) );
        REQUIRE( ranges::equal(dwp1,correctDWP1,equal) );



      } // THEN
    } // WHEN
    /*
    */
  } // GIVEN
} // TEST CASE



TEST_CASE( "processing coherent elastic scattering data" ){
  GIVEN( "bragg scattering information" ){

    std::vector<double> bragg (10000,0.0);
    double maxEnergy = 5.0;
    int iel = 3, npr = 1;
    auto out = coher(iel,npr,bragg,maxEnergy);
    int numEdges = int(0.5*std::get<1>(out));

    double tol = 9e-8;
    double dwpix_0 = 2.1802439504684434,
           dwp1_0  = 2.1647587544877265;
    std::vector<double> 
    temps { 296.0 },//, 400.0, 500.0, 600.0, 700.0, 800.0, 1000.0, 1200.0 },
    dwpix {2.18024395 },//, 2.72608260, 3.28130480, 3.85303452, 4.43480683, 5.02310000, 6.21177434, 7.41006538},
    dwp1  {2.16475875 };//, 2.59570940, 3.04447306, 3.51490437, 3.99970405, 4.49435669, 5.50273307, 6.5268008};

    int numSecondaryScatterers = 1, secondaryScatterType = 0;
    std::vector<std::vector<double>> correctSCR { { 
    1.061174E-3, 0.000000, 3.754368E-3, 0.01844542, 4.244696E-3, 0.03019557, 
    4.815542E-3, 0.04605728, 7.999064E-3, 0.05848436, 9.550566E-3, 0.05848436, 
    0.01126310, 0.09839143, 0.01232428, 0.09839143, 0.01330493, 0.1447364, 
    0.01501747, 0.1530992, 0.01550780, 0.1865445, 0.01607865, 0.1944157, 
    0.01697878, 0.1946256, 0.01926217, 0.2018871, 0.02073315, 0.2021628, 
    0.02081367, 0.2021628, 0.02456804, 0.2330883, 0.02628058, 0.2445528, 
    0.02652935, 0.2445528, 0.02734175, 0.2554993, 0.02824189, 0.2563846, 
    0.03028372, 0.2828894, 0.03052527, 0.2933505, 0.03199626, 0.2935517, 
    0.03378931, 0.3124959, 0.03485049, 0.3124959, 0.03583114, 0.3589361, 
    0.03779246, 0.3589361, 0.03803401, 0.3764955, 0.03820227, 0.3794114, 
    0.04154682, 0.3999303, 0.04195663, 0.4039698, 0.04325936, 0.4042837, 
    0.04333988, 0.4042837, 0.04505242, 0.4191601, 0.04611359, 0.4191601, 
    0.04880679, 0.4260771, 0.04929711, 0.4400626, 0.04946537, 0.4540039, 
    0.04986796, 0.4606684, 0.05076810, 0.4612112, 0.05199753, 0.5043222, 
    0.05460298, 0.5043222, 0.05575190, 0.5379218, 0.06006989, 0.5407486, 
    0.06031866, 0.5439489, 0.06431459, 0.5522136, 0.06701500, 0.5546901, 
    0.06791514, 0.5706061, 0.07133300, 0.5753105, 0.07158177, 0.5753105, 
    0.07166951, 0.5940949, 0.07533614, 0.6213200, 0.07704868, 0.6812390, 
    0.08293261, 0.7093026, 0.08595510, 0.7247594, 0.09385920, 0.7540229, 
    0.09827216, 0.7587189, 0.1009726, 0.7953557, 0.1061174, 0.8063413, 
    0.1120674, 0.8601529, 0.1183467, 0.8603506, 0.1197444, 0.8688838, 0.1211349, 
    0.8842583, 0.1278973, 0.8842583, 0.1279850, 0.8864049, 0.1284021, 0.9080055, 
    0.1351573, 0.9256194, 0.1399067, 0.9443617, 0.1434195, 0.9806480, 0.1506651, 
    0.9872785, 0.1511698, 0.9905737, 0.1521360, 0.9907037, 0.1528091, 1.005188, 
    0.1614378, 1.006617, 0.1616866, 1.006617, 0.1617743, 1.008041, 0.1621914, 
    1.019128, 0.1678265, 1.037763, 0.1771139, 1.038978, 0.1772088, 1.046352, 
    0.1790896, 1.046399, 0.1793384, 1.077251, 0.1884720, 1.089936, 0.1943559, 
    1.106835, 0.2047777, 1.111309, 0.2056190, 1.119215, 0.2079901, 1.141363, 
    0.2184119, 1.142891, 0.2192532, 1.144405, 0.2211124, 1.149246, 0.2222613, 
    1.151824, 0.2230076, 1.164552, 0.2342707, 1.165195, 0.2359616, 1.171740, 
    0.2387642, 1.191062, 0.2515427, 1.191585, 0.2518792, 1.199059, 0.2537816, 
    1.207120, 0.2668089, 1.211455, 0.2680600, 1.212360, 0.2716606, 1.230781, 
    0.2853320, 1.231894, 0.2863271, 1.232990, 0.2866780, 1.246755, 0.3013445, 
    1.247072, 0.3018493, 1.250616, 0.3054499, 1.253331, 0.3066793, 1.267926, 
    0.3224803, 1.269461, 0.3236292, 1.270729, 0.3243755, 1.271218, 0.3262347, 
    1.271336, 0.3317304, 1.272870, 0.3404686, 1.277276, 0.3438204, 1.288919, 
    0.3633025, 1.290845, 0.3655198, 1.291032, 0.3667492, 1.297174, 0.3776097, 
    1.299137, 0.3830838, 1.305966, 0.4023760, 1.306080, 0.4024709, 1.306884, 
    0.4038903, 1.312080, 0.4168731, 1.316370, 0.4244696, 1.321595, 0.4470186, 
    1.322037, 0.4477649, 1.322183, 0.4482697, 1.324159, 0.4556246, 1.324373, 
    0.4582589, 1.325511, 0.4679778, 1.331243, 0.4914269, 1.331243, 0.4920710, 
    1.331481, 0.4924808, 1.332640, 0.5017671, 1.334648, 0.5136082, 1.337895, 
    0.5393108, 1.338047, 0.5398888, 1.338077, 0.5402336, 1.338151, 0.5428680, 
    1.338728, 0.5469589, 1.338741, 0.5473976, 1.340412, 0.5613611, 1.342810, 
    0.5894358, 1.343162, 0.5924500, 1.343234, 0.5926265, 1.343468, 0.5951504, 
    1.344055, 0.6112363, 1.345838, 0.6419970, 1.345882, 0.6440388, 1.346021, 
    0.6450256, 1.347170, 0.6632338, 1.348333, 0.6965183, 1.348367, 0.6970231, 
    1.348776, 0.7173537, 1.349567, 0.7533097, 1.349587, 0.7538878, 1.349689, 
    0.7570930, 1.349975, 0.7735959, 1.350462, 0.8122896, 1.350512, 0.8177121, 
    1.350704, 0.8319605, 1.351045, 0.8735889, 1.351046, 0.8749638, 1.351047, 
    0.8755213, 1.351054, 0.8767280, 1.351054, 0.8770129, 1.351060, 0.8772328, 
    1.351069, 0.8787482, 1.351113, 0.8890451, 1.351133, 0.8920303, 1.351134, 
    0.8924474, 1.351376, 0.9370828, 1.351376, 0.9373027, 1.351380, 0.9411675, 
    1.351417, 0.9525173, 1.351433, 0.9550566, 1.351576, 1.003863, 1.351578, 
    1.007517, 1.351579, 1.008607, 1.351584, 1.013875, 1.351588, 1.015127, 
    1.351599, 1.019788, 1.351690, 1.071442, 1.351691, 1.072240, 1.351692, 
    1.076411, 1.351695, 1.079858, 1.351700, 1.086642, 1.351756, 1.141328, 
    1.351756, 1.143567, 1.351758, 1.146712, 1.351763, 1.155619, 1.351793, 
    1.213414, 1.351793, 1.215688, 1.351796, 1.226717, 1.351813, 1.288085, 
    1.351813, 1.288809, 1.351813, 1.290776, 1.351815, 1.299938, 1.351824, 
    1.365075, 1.351824, 1.365629, 1.351825, 1.366590, 1.351825, 1.367936, 
    1.351825, 1.368763, 1.351825, 1.369224, 1.351825, 1.372589, 1.351826, 
    1.375282, 1.351831, 1.444142, 1.351831, 1.444339, 1.351831, 1.446359, 
    1.351831, 1.446615, 1.351831, 1.447393, 1.351831, 1.449412, 1.351831, 
    1.452747, 1.351834, 1.525773, 1.351834, 1.525903, 1.351834, 1.526512, 
    1.351834, 1.526936, 1.351834, 1.530821, 1.351834, 1.532335, 1.351836, 
    1.609042, 1.351836, 1.609224, 1.351836, 1.609897, 1.351836, 1.614046, 
    1.351836, 1.695459, 1.351836, 1.695656, 1.351836, 1.696248, 1.351836, 
    1.697878, 1.351837, 1.783325, 1.351837, 1.783463, 1.351837, 1.783834, 
    1.351837, 1.873237, 1.351837, 1.873983, 1.351837, 1.875665, 1.351837, 
    5.000000, 1.351837 }};
    //std::cout << bragg[0] << "   " << bragg[1] << "    " << bragg[2] << std::endl;
    //std::cout << bragg[3] << "   " << bragg[4] << "    " << bragg[5] << std::endl;
    auto totalSCR = processCoherentElastic(bragg,dwpix,dwp1,numSecondaryScatterers,secondaryScatterType,numEdges,tol,temps);
    REQUIRE( ranges::equal( totalSCR[0], correctSCR[0], equal ) );

    //std::cout << totalSCR[0].size() << std::endl;
    //std::cout << correctSCR[0].size() << std::endl;
    //for ( size_t i = 0; i < totalSCR[0].size(); ++i){
        //std::cout << i << "   " << totalSCR[0][i] << "   " << correctSCR[0][i] << std::endl;
      //REQUIRE( totalSCR[0][i] == Approx(correctSCR[0][i]).epsilon(1e-5) );
   // }
    //REQUIRE( totalSCR[0][0] == Approx(correctSCR[0][0]).epsilon(1e-5) );
    //REQUIRE( totalSCR[0][1] == Approx(correctSCR[0][1]).epsilon(1e-5) );
    //REQUIRE( totalSCR[0][2] == Approx(correctSCR[0][2]).epsilon(1e-5) );
    //REQUIRE( totalSCR[0][3] == Approx(correctSCR[0][3]).epsilon(1e-5) );


  } // GIVEN
} // TEST CASE







TEST_CASE( "endout" ){
  REQUIRE( true );
  std::vector<double> alphas, betas, sab, temps, secondaryScatterVecThing (10,0.0), dwpix, dwp1;
  alphas = {1.1, 2.2, 3.3, 4.5, 5.8};
  betas = {0.1, 0.2, 1.3, 1.4, 2.5, 2.6, 3.7};
  sab = { 0.8812416231, 0.8226588624, 0.0371931173, 0.0370414517, 0.0453434977, 
          0.0449511778, 0.0177215328, 0.4944382555, 0.4922000032, 0.0833173024, 
          0.0740790498, 0.0698111325, 0.0693835223, 0.0339337297, 0.3223316052, 
          0.3256420103, 0.1180584841, 0.1055070878, 0.0815560280, 0.0810404205, 
          0.0458832427, 0.2182146674, 0.2226695868, 0.1282393202, 0.1182525679, 
          0.0860463732, 0.0851264533, 0.0537751752, 0.1498324933, 0.1534650775, 
          0.1195514020, 0.1135384304, 0.0852010403, 0.0844404310, 0.0572611451};
  temps = { 296.0 };
  dwpix = { 0.27366867553080776 };
  dwp1  = { 0.0 };





  std::cout.precision(15);
//std::cout << sab[0+4*betas.size()] << std::endl;
  double awr = 0.99917, spr = 20.449, aws = 15.85316, sps = 3.8883;

  int numSecondaryScatterers = 1, secondaryScatterType = 1;

  //endout(sab,awr,aws,spr,sps,temps,numSecondaryScatterers,secondaryScatterType,secondaryScatterVecThing,alphas,betas,dwpix,dwp1);

} // TEST CASE
