#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include "sbfill.h"
#include <iostream>



void equal( double a, double b ){
    if( b == 0 ){ REQUIRE( (a-b) < 1e-2 ); }
    if( b != 0 ){ REQUIRE ( std::abs( (a-b)/(b) ) < 1e-2 ); }
}





TEST_CASE( "sbfill" ){
    GIVEN( "inputs" ){
        {
        std::vector<double> sb (8500,0.0); 
        std::vector<double> ap (8500,5.0); 
        std::vector<double> betan {0.0, 0.15, 0.3, 0.6, 1.2};
        int nbeta = 5;
        int nbt = 4177;
        int ibeta = 0;
        int ndmax = 8500;
        double delta = 1.316611059E-003;
        double be = 0.0;
        sbfill( sb, nbt, delta, be, ap, betan, nbeta, ibeta, ndmax );
        std::vector<double> correct_sb {1.8070534, 1.8046757, 1.8023012, 1.7999299, 1.7975616, 1.7951965, 1.7928345, 1.7904756, 1.7881197, 1.7857670, 1.7834174, 1.7810709, 1.7787275, 1.7763871, 1.7740498, 1.7717156, 1.7693845, 1.7670565, 1.7647315, 1.7624095, 1.7600907, 1.7577748, 1.7554620, 1.7531523, 1.7508456, 1.7485419, 1.7462413, 1.7439437, 1.7416491, 1.7393575, 1.7370690, 1.7347834, 1.7325009, 1.7302214, 1.7279449, 1.7256713, 1.7234008, 1.7211332, 1.7188687, 1.7166071, 1.7143484, 1.7120928, 1.7098401, 1.7075904, 1.7053437, 1.7030999, 1.7008590, 1.6986211, 1.6963862, 1.6941542, 1.6919251};
        int j = 0;
        for (int i = 4950; i < 5000; ++i ){
            equal(sb[i], correct_sb[j]);
            j += 1;
        }
    }
    {
   //     for ( auto entry : sb ){ if ( entry != 0.0 ){ std::cout << "    " << entry << std::endl; } }
         std::vector<double> sb (8500,0.0); 
        std::vector<double> ap (8500,8.0); 
        std::vector<double> betan {0.0, 0.15, 0.3, 0.6, 1.2};
        int nbeta = 5;
        int nbt = 4177;
        int ibeta = 0;
        int ndmax = 8500;
        double delta = 1.316611059E-003;
        double be = 0.0;
        sbfill( sb, nbt, delta, be, ap, betan, nbeta, ibeta, ndmax );
        std::vector<double> correct_sb {2.8912854, 2.8874812, 2.8836820, 2.8798878, 2.8760986, 2.8723144, 2.8685352, 2.8647609, 2.8609916, 2.8572273, 2.8534679, 2.8497135, 2.8459640, 2.8422194, 2.8384798, 2.8347451, 2.8310153, 2.8272904, 2.8235704, 2.8198553, 2.8161451, 2.8124397, 2.8087393, 2.8050437, 2.8013530, 2.7976671, 2.7939861, 2.7903099, 2.7866386, 2.7829721, 2.7793104, 2.7756535, 2.7720015, 2.7683542, 2.7647118, 2.7610741, 2.7574413, 2.7538132, 2.7501899, 2.7465713, 2.7429575, 2.7393485, 2.7357442, 2.7321447, 2.7285499, 2.7249598, 2.7213745, 2.7177938, 2.7142179, 2.7106467, 2.7070802};
        int j = 0;
        for (int i = 4950; i < 5000; ++i ){
            equal(sb[i], correct_sb[j]);
            j += 1;
        }
        std::vector<double> correct_sb_2 {6.3704354, 6.3620535, 6.3536827, 6.3453229, 6.3369741, 6.3286362, 6.3203093, 6.3119934, 6.3036885, 6.2953944, 6.2871113, 6.2788390, 6.2705777, 6.2623272, 6.2540876, 6.2458588, 6.2376409, 6.2294337, 6.2212374, 6.2130518, 6.2048770, 6.1967130, 6.1885597, 6.1804171, 6.1722853, 6.1641641, 6.1560537, 6.1479539, 6.1398647, 6.1317862, 6.1237184, 6.1156611, 6.1076145, 6.0995784, 6.0915529, 6.0835380, 6.0755336, 6.0675398, 6.0595564, 6.0515836, 6.0436213, 6.0356694, 6.0277280, 6.0197970, 6.0118765, 6.0039664, 5.9960667, 5.9881774, 5.9802985, 5.9724300, 5.964571};
        j = 0;
        for (int i = 4350; i < 4400; ++i ){
            equal(sb[i], correct_sb_2[j]);
            j += 1;
        }

    }
    } // GIVEN
} // TEST CASE
